node {
  name: "string_to_index/hash_table"
  op: "HashTableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "key_dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "hash_table_data/vocab.50K.en_0_-1"
    }
  }
  attr {
    key: "use_node_name_sharing"
    value {
      b: false
    }
  }
  attr {
    key: "value_dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "string_to_index/hash_table/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "string_to_index/hash_table/table_init/asset_filepath"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "data/vocab.50K.en"
      }
    }
  }
}
node {
  name: "string_to_index/hash_table/table_init"
  op: "InitializeTableFromTextFileV2"
  input: "string_to_index/hash_table"
  input: "string_to_index/hash_table/table_init/asset_filepath"
  attr {
    key: "delimiter"
    value {
      s: "\t"
    }
  }
  attr {
    key: "key_index"
    value {
      i: 0
    }
  }
  attr {
    key: "value_index"
    value {
      i: -1
    }
  }
  attr {
    key: "vocab_size"
    value {
      i: -1
    }
  }
}
node {
  name: "string_to_index_1/hash_table"
  op: "HashTableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "key_dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "hash_table_data/vocab.50K.de_0_-1"
    }
  }
  attr {
    key: "use_node_name_sharing"
    value {
      b: false
    }
  }
  attr {
    key: "value_dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "string_to_index_1/hash_table/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "string_to_index_1/hash_table/table_init/asset_filepath"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "data/vocab.50K.de"
      }
    }
  }
}
node {
  name: "string_to_index_1/hash_table/table_init"
  op: "InitializeTableFromTextFileV2"
  input: "string_to_index_1/hash_table"
  input: "string_to_index_1/hash_table/table_init/asset_filepath"
  attr {
    key: "delimiter"
    value {
      s: "\t"
    }
  }
  attr {
    key: "key_index"
    value {
      i: 0
    }
  }
  attr {
    key: "value_index"
    value {
      i: -1
    }
  }
  attr {
    key: "vocab_size"
    value {
      i: -1
    }
  }
}
node {
  name: "Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "</s>"
      }
    }
  }
}
node {
  name: "hash_table_Lookup"
  op: "LookupTableFindV2"
  input: "string_to_index/hash_table"
  input: "Const"
  input: "string_to_index/hash_table/Const"
  attr {
    key: "Tin"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Cast"
  op: "Cast"
  input: "hash_table_Lookup"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "<s>"
      }
    }
  }
}
node {
  name: "hash_table_Lookup_1"
  op: "LookupTableFindV2"
  input: "string_to_index_1/hash_table"
  input: "Const_1"
  input: "string_to_index_1/hash_table/Const"
  attr {
    key: "Tin"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Cast_1"
  op: "Cast"
  input: "hash_table_Lookup_1"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "</s>"
      }
    }
  }
}
node {
  name: "hash_table_Lookup_2"
  op: "LookupTableFindV2"
  input: "string_to_index_1/hash_table"
  input: "Const_2"
  input: "string_to_index_1/hash_table/Const"
  attr {
    key: "Tin"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Cast_2"
  op: "Cast"
  input: "hash_table_Lookup_2"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "filenames"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "data/train.en"
      }
    }
  }
}
node {
  name: "compression_type"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 262144
      }
    }
  }
}
node {
  name: "filenames_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "data/train.de"
      }
    }
  }
}
node {
  name: "compression_type_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "buffer_size_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 262144
      }
    }
  }
}
node {
  name: "buffer_size_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 32000
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "num_parallel_calls"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 28
      }
    }
  }
}
node {
  name: "buffer_size_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 32000
      }
    }
  }
}
node {
  name: "num_parallel_calls_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 28
      }
    }
  }
}
node {
  name: "buffer_size_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 32000
      }
    }
  }
}
node {
  name: "num_parallel_calls_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 28
      }
    }
  }
}
node {
  name: "buffer_size_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 32000
      }
    }
  }
}
node {
  name: "num_parallel_calls_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 28
      }
    }
  }
}
node {
  name: "buffer_size_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 32000
      }
    }
  }
}
node {
  name: "Iterator"
  op: "Iterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "TextLineDataset"
  op: "TextLineDataset"
  input: "filenames"
  input: "compression_type"
  input: "buffer_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "TextLineDataset_1"
  op: "TextLineDataset"
  input: "filenames_1"
  input: "compression_type_1"
  input: "buffer_size_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ZipDataset"
  op: "ZipDataset"
  input: "TextLineDataset"
  input: "TextLineDataset_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
      }
    }
  }
}
node {
  name: "ShuffleDataset"
  op: "ShuffleDataset"
  input: "ZipDataset"
  input: "buffer_size_2"
  input: "seed"
  input: "seed2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
}
node {
  name: "ParallelMapDataset"
  op: "ParallelMapDataset"
  input: "ShuffleDataset"
  input: "num_parallel_calls"
  attr {
    key: "Targuments"
    value {
      list {
      }
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "tf_map_func_ZG7oQjthlu0"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
      }
    }
  }
}
node {
  name: "PrefetchDataset"
  op: "PrefetchDataset"
  input: "ParallelMapDataset"
  input: "buffer_size_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
      }
    }
  }
}
node {
  name: "FilterDataset"
  op: "FilterDataset"
  input: "PrefetchDataset"
  attr {
    key: "Targuments"
    value {
      list {
      }
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
      }
    }
  }
  attr {
    key: "predicate"
    value {
      func {
        name: "tf_predicate_qS2YGtJSHQo"
      }
    }
  }
}
node {
  name: "ParallelMapDataset_1"
  op: "ParallelMapDataset"
  input: "FilterDataset"
  input: "string_to_index/hash_table"
  input: "string_to_index/hash_table/Const"
  input: "string_to_index_1/hash_table"
  input: "string_to_index_1/hash_table/Const"
  input: "num_parallel_calls_1"
  attr {
    key: "Targuments"
    value {
      list {
        type: DT_RESOURCE
        type: DT_INT64
        type: DT_RESOURCE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "tf_map_func_WXlNxGxgl7E"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
}
node {
  name: "PrefetchDataset_1"
  op: "PrefetchDataset"
  input: "ParallelMapDataset_1"
  input: "buffer_size_4"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
}
node {
  name: "ParallelMapDataset_2"
  op: "ParallelMapDataset"
  input: "PrefetchDataset_1"
  input: "Cast_1"
  input: "Cast_2"
  input: "num_parallel_calls_2"
  attr {
    key: "Targuments"
    value {
      list {
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "tf_map_func_pVVD0U7UmUA"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
}
node {
  name: "PrefetchDataset_2"
  op: "PrefetchDataset"
  input: "ParallelMapDataset_2"
  input: "buffer_size_5"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
}
node {
  name: "ParallelMapDataset_3"
  op: "ParallelMapDataset"
  input: "PrefetchDataset_2"
  input: "num_parallel_calls_3"
  attr {
    key: "Targuments"
    value {
      list {
      }
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "tf_map_func_5XlhRxW9ohU"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
}
node {
  name: "PrefetchDataset_3"
  op: "PrefetchDataset"
  input: "ParallelMapDataset_3"
  input: "buffer_size_6"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
}
node {
  name: "GroupByWindowDataset"
  op: "GroupByWindowDataset"
  input: "PrefetchDataset_3"
  input: "Cast"
  input: "Cast_2"
  attr {
    key: "Tkey_func_other_arguments"
    value {
      list {
      }
    }
  }
  attr {
    key: "Treduce_func_other_arguments"
    value {
      list {
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "Twindow_size_func_other_arguments"
    value {
      list {
      }
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "key_func"
    value {
      func {
        name: "tf_key_func_gvSjQCbpW4c"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "reduce_func"
    value {
      func {
        name: "tf_reduce_func_IUmMLHKVRFo"
      }
    }
  }
  attr {
    key: "window_size_func"
    value {
      func {
        name: "tf_window_size_func_nul81tt5qUE"
      }
    }
  }
}
node {
  name: "MakeIterator"
  op: "MakeIterator"
  input: "GroupByWindowDataset"
  input: "Iterator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Iterator"
      }
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "Iterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "Iterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
}
node {
  name: "Rank/packed"
  op: "Pack"
  input: "IteratorGetNext:3"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "range"
  op: "Range"
  input: "range/start"
  input: "Rank"
  input: "range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Sum/input"
  op: "Pack"
  input: "IteratorGetNext:3"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Sum"
  op: "Sum"
  input: "Sum/input"
  input: "range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Rank_1/packed"
  op: "Pack"
  input: "IteratorGetNext:4"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Rank_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "range_1/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "range_1/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "range_1"
  op: "Range"
  input: "range_1/start"
  input: "Rank_1"
  input: "range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Sum_1/input"
  op: "Pack"
  input: "IteratorGetNext:4"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Sum_1"
  op: "Sum"
  input: "Sum_1/input"
  input: "range_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "add"
  op: "Add"
  input: "Sum"
  input: "Sum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Rank_2/packed"
  op: "Pack"
  input: "IteratorGetNext:4"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Rank_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "range_2/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "range_2/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "range_2"
  op: "Range"
  input: "range_2/start"
  input: "Rank_2"
  input: "range_2/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Sum_2/input"
  op: "Pack"
  input: "IteratorGetNext:4"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Sum_2"
  op: "Sum"
  input: "Sum_2/input"
  input: "range_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "v/encoder/src_embedding/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/src_embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "P\303\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "v/encoder/src_embedding/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/src_embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.010898791253566742
      }
    }
  }
}
node {
  name: "v/encoder/src_embedding/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/src_embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.010898791253566742
      }
    }
  }
}
node {
  name: "v/encoder/src_embedding/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "v/encoder/src_embedding/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/src_embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50000
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "v/encoder/src_embedding/Initializer/random_uniform/sub"
  op: "Sub"
  input: "v/encoder/src_embedding/Initializer/random_uniform/max"
  input: "v/encoder/src_embedding/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/src_embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/encoder/src_embedding/Initializer/random_uniform/mul"
  op: "Mul"
  input: "v/encoder/src_embedding/Initializer/random_uniform/RandomUniform"
  input: "v/encoder/src_embedding/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/src_embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50000
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/encoder/src_embedding/Initializer/random_uniform"
  op: "Add"
  input: "v/encoder/src_embedding/Initializer/random_uniform/mul"
  input: "v/encoder/src_embedding/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/src_embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50000
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/encoder/src_embedding"
  op: "VariableV2"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/src_embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50000
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 50000
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "v/encoder/src_embedding/Assign"
  op: "Assign"
  input: "v/encoder/src_embedding"
  input: "v/encoder/src_embedding/Initializer/random_uniform"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/src_embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50000
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "v/encoder/src_embedding/read"
  op: "Identity"
  input: "v/encoder/src_embedding"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/src_embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50000
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/embedding_lookup/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/src_embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/embedding_lookup"
  op: "GatherV2"
  input: "v/encoder/src_embedding/read"
  input: "IteratorGetNext"
  input: "v/tower_0/encoder/embedding_lookup/axis"
  device: "/gpu:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/src_embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/Rank"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/range/start"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/range/delta"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/range"
  op: "Range"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/range/start"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/Rank"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/range/delta"
  device: "/gpu:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/concat/values_0"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/concat/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/concat"
  op: "ConcatV2"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/concat/values_0"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/range"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/concat/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/transpose"
  op: "Transpose"
  input: "v/tower_0/encoder/embedding_lookup"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/concat"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/sequence_length"
  op: "Identity"
  input: "IteratorGetNext:3"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/Shape"
  op: "Shape"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/transpose"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/strided_slice/stack"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/strided_slice/stack_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/strided_slice/stack_2"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/strided_slice"
  op: "StridedSlice"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/Shape"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/strided_slice/stack"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/strided_slice/stack_1"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/strided_slice/stack_2"
  device: "/gpu:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims/dim"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims"
  op: "ExpandDims"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/strided_slice"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims/dim"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros"
  op: "Fill"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros/Const"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims_1/dim"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims_1"
  op: "ExpandDims"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/strided_slice"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims_1/dim"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims_2/dim"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims_2"
  op: "ExpandDims"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/strided_slice"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims_2/dim"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_2"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat_1/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims_2"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_2"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat_1/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros_1/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat_1"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros_1/Const"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims_3/dim"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims_3"
  op: "ExpandDims"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/strided_slice"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims_3/dim"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_3"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims/dim"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims"
  op: "ExpandDims"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/strided_slice"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims/dim"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/concat/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/concat"
  op: "ConcatV2"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/Const"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/concat/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/zeros/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/zeros"
  op: "Fill"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/concat"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/zeros/Const"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims_1/dim"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims_1"
  op: "ExpandDims"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/strided_slice"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims_1/dim"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/Const_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims_2/dim"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims_2"
  op: "ExpandDims"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/strided_slice"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims_2/dim"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/Const_2"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/concat_1/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/concat_1"
  op: "ConcatV2"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims_2"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/Const_2"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/concat_1/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/zeros_1/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/zeros_1"
  op: "Fill"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/concat_1"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/zeros_1/Const"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims_3/dim"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims_3"
  op: "ExpandDims"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/strided_slice"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims_3/dim"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/Const_3"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/Shape_1"
  op: "Shape"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/sequence_length"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/stack"
  op: "Pack"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/strided_slice"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/Equal"
  op: "Equal"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/Shape_1"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/stack"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/All"
  op: "All"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/Equal"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/Const"
  device: "/gpu:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/Assert/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor v/tower_0/encoder/bidirectional_rnn/fw/fw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/Assert/Const_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/Assert/Assert/data_0"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor v/tower_0/encoder/bidirectional_rnn/fw/fw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/Assert/Assert/data_2"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/Assert/Assert"
  op: "Assert"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/All"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/Assert/Assert/data_0"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/stack"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/Assert/Assert/data_2"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/Shape_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/CheckSeqLen"
  op: "Identity"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/sequence_length"
  input: "^v/tower_0/encoder/bidirectional_rnn/fw/fw/Assert/Assert"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/Shape_2"
  op: "Shape"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/transpose"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/strided_slice_1/stack"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/strided_slice_1/stack_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/strided_slice_1/stack_2"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/strided_slice_1"
  op: "StridedSlice"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/Shape_2"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/strided_slice_1/stack"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/strided_slice_1/stack_1"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/strided_slice_1/stack_2"
  device: "/gpu:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/Shape_3"
  op: "Shape"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/transpose"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/strided_slice_2/stack"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/strided_slice_2/stack_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/strided_slice_2/stack_2"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/strided_slice_2"
  op: "StridedSlice"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/Shape_3"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/strided_slice_2/stack"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/strided_slice_2/stack_1"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/strided_slice_2/stack_2"
  device: "/gpu:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/ExpandDims/dim"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/ExpandDims"
  op: "ExpandDims"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/strided_slice_2"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/ExpandDims/dim"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/Const_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/concat_1/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/concat_1"
  op: "ConcatV2"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/ExpandDims"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/Const_1"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/concat_1/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/zeros/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/zeros"
  op: "Fill"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/concat_1"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/zeros/Const"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/Const_2"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/Min"
  op: "Min"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/CheckSeqLen"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/Const_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/Const_3"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/Max"
  op: "Max"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/CheckSeqLen"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/Const_3"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/time"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArray"
  op: "TensorArrayV3"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "v/tower_0/encoder/bidirectional_rnn/fw/fw/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArray_1"
  op: "TensorArrayV3"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "v/tower_0/encoder/bidirectional_rnn/fw/fw/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/transpose"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/Shape"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_1"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_2"
  device: "/gpu:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/start"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/delta"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  op: "Range"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/start"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/delta"
  device: "/gpu:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArray_1"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/transpose"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArray_1:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/fw/fw/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/Maximum/x"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/Maximum"
  op: "Maximum"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/Maximum/x"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/Max"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/Minimum"
  op: "Minimum"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/strided_slice_1"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/Maximum"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/iteration_counter"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Enter"
  op: "Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/iteration_counter"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Enter_1"
  op: "Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/time"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Enter_2"
  op: "Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArray:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Enter_3"
  op: "Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Enter_4"
  op: "Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Enter_5"
  op: "Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/zeros"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Enter_6"
  op: "Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/zeros_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Merge"
  op: "Merge"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/NextIteration"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Merge_1"
  op: "Merge"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Enter_1"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/NextIteration_1"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Merge_2"
  op: "Merge"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Enter_2"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/NextIteration_2"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Merge_3"
  op: "Merge"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Enter_3"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/NextIteration_3"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Merge_4"
  op: "Merge"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Enter_4"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/NextIteration_4"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Merge_5"
  op: "Merge"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Enter_5"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/NextIteration_5"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Merge_6"
  op: "Merge"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Enter_6"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/NextIteration_6"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Less"
  op: "Less"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Merge"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Less/Enter"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Less/Enter"
  op: "Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/strided_slice_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Less_1"
  op: "Less"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Merge_1"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Less_1/Enter"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Less_1/Enter"
  op: "Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/Minimum"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/LogicalAnd"
  op: "LogicalAnd"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Less"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Less_1"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/LoopCond"
  op: "LoopCond"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/LogicalAnd"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Switch"
  op: "Switch"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Merge"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/LoopCond"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Switch_1"
  op: "Switch"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Merge_1"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/LoopCond"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Switch_2"
  op: "Switch"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Merge_2"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/LoopCond"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Switch_3"
  op: "Switch"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Merge_3"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/LoopCond"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Switch_4"
  op: "Switch"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Merge_4"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/LoopCond"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Merge_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Switch_5"
  op: "Switch"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Merge_5"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/LoopCond"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Merge_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Switch_6"
  op: "Switch"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Merge_6"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/LoopCond"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Merge_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Identity"
  op: "Identity"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Switch:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Identity_1"
  op: "Identity"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Switch_1:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Identity_2"
  op: "Identity"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Switch_2:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Identity_3"
  op: "Identity"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Switch_3:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Identity_4"
  op: "Identity"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Switch_4:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Identity_5"
  op: "Identity"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Switch_5:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Identity_6"
  op: "Identity"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Switch_6:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/add/y"
  op: "Const"
  input: "^v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/add"
  op: "Add"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Identity"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/add/y"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArray_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/GreaterEqual"
  op: "GreaterEqual"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/GreaterEqual/Enter"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/GreaterEqual/Enter"
  op: "Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/CheckSeqLen"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\004\000\000\000\010\000\000"
      }
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.04419417306780815
      }
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.04419417306780815
      }
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  op: "VariableV2"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Assign"
  op: "Assign"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/read"
  op: "Identity"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2048
      }
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Initializer/zeros"
  op: "Fill"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Initializer/zeros/shape_as_tensor"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  op: "VariableV2"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Assign"
  op: "Assign"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Initializer/zeros"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/bias/read"
  op: "Identity"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/Const"
  op: "Const"
  input: "^v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/concat/axis"
  op: "Const"
  input: "^v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/concat"
  op: "ConcatV2"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Identity_4"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/concat/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul"
  op: "MatMul"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/concat"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul/Enter"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/read"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd/Enter"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/bias/read"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/Const_1"
  op: "Const"
  input: "^v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/split"
  op: "Split"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/Const"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/Const_2"
  op: "Const"
  input: "^v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.800000011920929
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/Add"
  op: "Add"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/split:2"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/Const_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/Add"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/Mul"
  op: "Mul"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Identity_3"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/split"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/Tanh"
  op: "Tanh"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/split:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1"
  op: "Mul"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid_1"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/Tanh"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1"
  op: "Add"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/Mul"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/Tanh_1"
  op: "Tanh"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/split:3"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2"
  op: "Mul"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/Tanh_1"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\004\000\000\000\010\000\000"
      }
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.04419417306780815
      }
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.04419417306780815
      }
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
  op: "VariableV2"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Assign"
  op: "Assign"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/read"
  op: "Identity"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2048
      }
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Initializer/zeros"
  op: "Fill"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Initializer/zeros/shape_as_tensor"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
  op: "VariableV2"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Assign"
  op: "Assign"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Initializer/zeros"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/bias/read"
  op: "Identity"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/Const"
  op: "Const"
  input: "^v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/concat/axis"
  op: "Const"
  input: "^v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/concat"
  op: "ConcatV2"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Identity_6"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/concat/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul"
  op: "MatMul"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/concat"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul/Enter"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/read"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd/Enter"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/bias/read"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/Const_1"
  op: "Const"
  input: "^v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/split"
  op: "Split"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/Const"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/Const_2"
  op: "Const"
  input: "^v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.800000011920929
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/Add"
  op: "Add"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/split:2"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/Const_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/Add"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/Mul"
  op: "Mul"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Identity_5"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/split"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/Tanh"
  op: "Tanh"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/split:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1"
  op: "Mul"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid_1"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/Tanh"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1"
  op: "Add"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/Mul"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/Tanh_1"
  op: "Tanh"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/split:3"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2"
  op: "Mul"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/Tanh_1"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Select"
  op: "Select"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Select/Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Select/Enter"
  op: "Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/zeros"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Select_1"
  op: "Select"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Identity_3"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Select_2"
  op: "Select"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Identity_4"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Select_3"
  op: "Select"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Identity_5"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Select_4"
  op: "Select"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/GreaterEqual"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Identity_6"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Select"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Identity_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArray"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/fw/fw/while/fw/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/add_1/y"
  op: "Const"
  input: "^v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/add_1"
  op: "Add"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Identity_1"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/add_1/y"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/NextIteration"
  op: "NextIteration"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/add"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/NextIteration_1"
  op: "NextIteration"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/add_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/NextIteration_2"
  op: "NextIteration"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/NextIteration_3"
  op: "NextIteration"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Select_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/NextIteration_4"
  op: "NextIteration"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Select_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/NextIteration_5"
  op: "NextIteration"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Select_3"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/NextIteration_6"
  op: "NextIteration"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Select_4"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit"
  op: "Exit"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Switch"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_1"
  op: "Exit"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Switch_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_2"
  op: "Exit"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Switch_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_3"
  op: "Exit"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Switch_3"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_4"
  op: "Exit"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Switch_4"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_5"
  op: "Exit"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Switch_5"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_6"
  op: "Exit"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Switch_6"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArray"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  op: "Range"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArrayStack/range/start"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArraySizeV3"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArray"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 512
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/Const_4"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/Rank_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/range_1/start"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/range_1/delta"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/range_1"
  op: "Range"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/range_1/start"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/Rank_1"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/range_1/delta"
  device: "/gpu:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/concat_2/values_0"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/concat_2/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/concat_2"
  op: "ConcatV2"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/concat_2/values_0"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/range_1"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/concat_2/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/transpose_1"
  op: "Transpose"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/concat_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/ReverseSequence"
  op: "ReverseSequence"
  input: "v/tower_0/encoder/embedding_lookup"
  input: "IteratorGetNext:3"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/Rank"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/range/start"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/range/delta"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/range"
  op: "Range"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/range/start"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/Rank"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/range/delta"
  device: "/gpu:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/concat/values_0"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/concat/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/concat"
  op: "ConcatV2"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/concat/values_0"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/range"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/concat/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/transpose"
  op: "Transpose"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/ReverseSequence"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/concat"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/sequence_length"
  op: "Identity"
  input: "IteratorGetNext:3"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/Shape"
  op: "Shape"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/transpose"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/strided_slice/stack"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/strided_slice/stack_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/strided_slice/stack_2"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/strided_slice"
  op: "StridedSlice"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/Shape"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/strided_slice/stack"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/strided_slice/stack_1"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/strided_slice/stack_2"
  device: "/gpu:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims/dim"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims"
  op: "ExpandDims"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/strided_slice"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims/dim"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros"
  op: "Fill"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros/Const"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims_1/dim"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims_1"
  op: "ExpandDims"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/strided_slice"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims_1/dim"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims_2/dim"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims_2"
  op: "ExpandDims"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/strided_slice"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims_2/dim"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_2"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat_1/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims_2"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_2"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat_1/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros_1/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat_1"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros_1/Const"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims_3/dim"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims_3"
  op: "ExpandDims"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/strided_slice"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState/ExpandDims_3/dim"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_3"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims/dim"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims"
  op: "ExpandDims"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/strided_slice"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims/dim"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/concat/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/concat"
  op: "ConcatV2"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/Const"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/concat/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/zeros/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/zeros"
  op: "Fill"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/concat"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/zeros/Const"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims_1/dim"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims_1"
  op: "ExpandDims"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/strided_slice"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims_1/dim"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/Const_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims_2/dim"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims_2"
  op: "ExpandDims"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/strided_slice"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims_2/dim"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/Const_2"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/concat_1/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/concat_1"
  op: "ConcatV2"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims_2"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/Const_2"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/concat_1/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/zeros_1/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/zeros_1"
  op: "Fill"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/concat_1"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/zeros_1/Const"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims_3/dim"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims_3"
  op: "ExpandDims"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/strided_slice"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/ExpandDims_3/dim"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/Const_3"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/Shape_1"
  op: "Shape"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/sequence_length"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/stack"
  op: "Pack"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/strided_slice"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/Equal"
  op: "Equal"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/Shape_1"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/stack"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/All"
  op: "All"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/Equal"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/Const"
  device: "/gpu:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/Assert/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor v/tower_0/encoder/bidirectional_rnn/bw/bw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/Assert/Const_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/Assert/Assert/data_0"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Expected shape for Tensor v/tower_0/encoder/bidirectional_rnn/bw/bw/sequence_length:0 is "
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/Assert/Assert/data_2"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: " but saw shape: "
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/Assert/Assert"
  op: "Assert"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/All"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/Assert/Assert/data_0"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/stack"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/Assert/Assert/data_2"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/Shape_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/CheckSeqLen"
  op: "Identity"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/sequence_length"
  input: "^v/tower_0/encoder/bidirectional_rnn/bw/bw/Assert/Assert"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/Shape_2"
  op: "Shape"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/transpose"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/strided_slice_1/stack"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/strided_slice_1/stack_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/strided_slice_1/stack_2"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/strided_slice_1"
  op: "StridedSlice"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/Shape_2"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/strided_slice_1/stack"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/strided_slice_1/stack_1"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/strided_slice_1/stack_2"
  device: "/gpu:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/Shape_3"
  op: "Shape"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/transpose"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/strided_slice_2/stack"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/strided_slice_2/stack_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/strided_slice_2/stack_2"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/strided_slice_2"
  op: "StridedSlice"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/Shape_3"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/strided_slice_2/stack"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/strided_slice_2/stack_1"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/strided_slice_2/stack_2"
  device: "/gpu:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/ExpandDims/dim"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/ExpandDims"
  op: "ExpandDims"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/strided_slice_2"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/ExpandDims/dim"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/Const_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/concat_1/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/concat_1"
  op: "ConcatV2"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/ExpandDims"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/Const_1"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/concat_1/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/zeros/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/zeros"
  op: "Fill"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/concat_1"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/zeros/Const"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/Const_2"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/Min"
  op: "Min"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/CheckSeqLen"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/Const_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/Const_3"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/Max"
  op: "Max"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/CheckSeqLen"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/Const_3"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/time"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArray"
  op: "TensorArrayV3"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "v/tower_0/encoder/bidirectional_rnn/bw/bw/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArray_1"
  op: "TensorArrayV3"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/strided_slice_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "v/tower_0/encoder/bidirectional_rnn/bw/bw/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/transpose"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/Shape"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_1"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_2"
  device: "/gpu:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/start"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/delta"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  op: "Range"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/start"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/delta"
  device: "/gpu:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArray_1"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/transpose"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArray_1:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/bw/bw/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/Maximum/x"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/Maximum"
  op: "Maximum"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/Maximum/x"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/Max"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/Minimum"
  op: "Minimum"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/strided_slice_1"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/Maximum"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/iteration_counter"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Enter"
  op: "Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/iteration_counter"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Enter_1"
  op: "Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/time"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Enter_2"
  op: "Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArray:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Enter_3"
  op: "Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Enter_4"
  op: "Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Enter_5"
  op: "Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/zeros"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Enter_6"
  op: "Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/zeros_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Merge"
  op: "Merge"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/NextIteration"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Merge_1"
  op: "Merge"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Enter_1"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/NextIteration_1"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Merge_2"
  op: "Merge"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Enter_2"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/NextIteration_2"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Merge_3"
  op: "Merge"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Enter_3"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/NextIteration_3"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Merge_4"
  op: "Merge"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Enter_4"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/NextIteration_4"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Merge_5"
  op: "Merge"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Enter_5"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/NextIteration_5"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Merge_6"
  op: "Merge"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Enter_6"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/NextIteration_6"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Less"
  op: "Less"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Merge"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Less/Enter"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Less/Enter"
  op: "Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/strided_slice_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Less_1"
  op: "Less"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Merge_1"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Less_1/Enter"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Less_1/Enter"
  op: "Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/Minimum"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/LogicalAnd"
  op: "LogicalAnd"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Less"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Less_1"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/LoopCond"
  op: "LoopCond"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/LogicalAnd"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Switch"
  op: "Switch"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Merge"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/LoopCond"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Switch_1"
  op: "Switch"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Merge_1"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/LoopCond"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Switch_2"
  op: "Switch"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Merge_2"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/LoopCond"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Switch_3"
  op: "Switch"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Merge_3"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/LoopCond"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Switch_4"
  op: "Switch"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Merge_4"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/LoopCond"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Merge_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Switch_5"
  op: "Switch"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Merge_5"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/LoopCond"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Merge_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Switch_6"
  op: "Switch"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Merge_6"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/LoopCond"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Merge_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Identity"
  op: "Identity"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Switch:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Identity_1"
  op: "Identity"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Switch_1:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Identity_2"
  op: "Identity"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Switch_2:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Identity_3"
  op: "Identity"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Switch_3:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Identity_4"
  op: "Identity"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Switch_4:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Identity_5"
  op: "Identity"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Switch_5:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Identity_6"
  op: "Identity"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Switch_6:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/add/y"
  op: "Const"
  input: "^v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/add"
  op: "Add"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Identity"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/add/y"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArray_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/GreaterEqual"
  op: "GreaterEqual"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/GreaterEqual/Enter"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/GreaterEqual/Enter"
  op: "Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/CheckSeqLen"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\004\000\000\000\010\000\000"
      }
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.04419417306780815
      }
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.04419417306780815
      }
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  op: "VariableV2"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Assign"
  op: "Assign"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/read"
  op: "Identity"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2048
      }
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Initializer/zeros"
  op: "Fill"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Initializer/zeros/shape_as_tensor"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  op: "VariableV2"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Assign"
  op: "Assign"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Initializer/zeros"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/bias/read"
  op: "Identity"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/Const"
  op: "Const"
  input: "^v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/concat/axis"
  op: "Const"
  input: "^v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/concat"
  op: "ConcatV2"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Identity_4"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/concat/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul"
  op: "MatMul"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/concat"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul/Enter"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/read"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd/Enter"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/bias/read"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/Const_1"
  op: "Const"
  input: "^v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/split"
  op: "Split"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/Const"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/Const_2"
  op: "Const"
  input: "^v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.800000011920929
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/Add"
  op: "Add"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/split:2"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/Const_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/Add"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/Mul"
  op: "Mul"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Identity_3"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/split"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/Tanh"
  op: "Tanh"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/split:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1"
  op: "Mul"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid_1"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/Tanh"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1"
  op: "Add"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/Mul"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/Tanh_1"
  op: "Tanh"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/split:3"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2"
  op: "Mul"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/Tanh_1"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\004\000\000\000\010\000\000"
      }
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.04419417306780815
      }
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.04419417306780815
      }
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
  op: "VariableV2"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Assign"
  op: "Assign"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/read"
  op: "Identity"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2048
      }
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Initializer/zeros"
  op: "Fill"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Initializer/zeros/shape_as_tensor"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
  op: "VariableV2"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Assign"
  op: "Assign"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Initializer/zeros"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/bias/read"
  op: "Identity"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/Const"
  op: "Const"
  input: "^v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/concat/axis"
  op: "Const"
  input: "^v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/concat"
  op: "ConcatV2"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Identity_6"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/concat/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul"
  op: "MatMul"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/concat"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul/Enter"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/read"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd/Enter"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/bias/read"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/Const_1"
  op: "Const"
  input: "^v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/split"
  op: "Split"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/Const"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/Const_2"
  op: "Const"
  input: "^v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.800000011920929
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/Add"
  op: "Add"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/split:2"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/Const_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/Add"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/Mul"
  op: "Mul"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Identity_5"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/split"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/Tanh"
  op: "Tanh"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/split:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1"
  op: "Mul"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid_1"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/Tanh"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1"
  op: "Add"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/Mul"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/Tanh_1"
  op: "Tanh"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/split:3"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2"
  op: "Mul"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/Tanh_1"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Select"
  op: "Select"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Select/Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Select/Enter"
  op: "Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/zeros"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Select_1"
  op: "Select"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Identity_3"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Select_2"
  op: "Select"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Identity_4"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Select_3"
  op: "Select"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Identity_5"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Select_4"
  op: "Select"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/GreaterEqual"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Identity_6"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Select"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Identity_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArray"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/bw/bw/while/bw/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/add_1/y"
  op: "Const"
  input: "^v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/add_1"
  op: "Add"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Identity_1"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/add_1/y"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/NextIteration"
  op: "NextIteration"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/add"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/NextIteration_1"
  op: "NextIteration"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/add_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/NextIteration_2"
  op: "NextIteration"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/NextIteration_3"
  op: "NextIteration"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Select_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/NextIteration_4"
  op: "NextIteration"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Select_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/NextIteration_5"
  op: "NextIteration"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Select_3"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/NextIteration_6"
  op: "NextIteration"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Select_4"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit"
  op: "Exit"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Switch"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_1"
  op: "Exit"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Switch_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_2"
  op: "Exit"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Switch_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_3"
  op: "Exit"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Switch_3"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_4"
  op: "Exit"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Switch_4"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_5"
  op: "Exit"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Switch_5"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_6"
  op: "Exit"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Switch_6"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArray"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  op: "Range"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArrayStack/range/start"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArraySizeV3"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArray"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 512
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/Const_4"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/Rank_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/range_1/start"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/range_1/delta"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/range_1"
  op: "Range"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/range_1/start"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/Rank_1"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/range_1/delta"
  device: "/gpu:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/concat_2/values_0"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/concat_2/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/concat_2"
  op: "ConcatV2"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/concat_2/values_0"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/range_1"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/concat_2/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/transpose_1"
  op: "Transpose"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/concat_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/ReverseSequence"
  op: "ReverseSequence"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/transpose_1"
  input: "IteratorGetNext:3"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlen"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "batch_dim"
    value {
      i: 0
    }
  }
  attr {
    key: "seq_dim"
    value {
      i: 1
    }
  }
}
node {
  name: "v/tower_0/encoder/concat/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/concat"
  op: "ConcatV2"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/transpose_1"
  input: "v/tower_0/encoder/ReverseSequence"
  input: "v/tower_0/encoder/concat/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/ones/shape_as_tensor"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/ones/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/ones"
  op: "Fill"
  input: "v/tower_0/decoder/BahdanauAttention/ones/shape_as_tensor"
  input: "v/tower_0/decoder/BahdanauAttention/ones/Const"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/Shape"
  op: "Shape"
  input: "v/tower_0/encoder/concat"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/strided_slice/stack"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/strided_slice/stack_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/strided_slice/stack_2"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/strided_slice"
  op: "StridedSlice"
  input: "v/tower_0/decoder/BahdanauAttention/Shape"
  input: "v/tower_0/decoder/BahdanauAttention/strided_slice/stack"
  input: "v/tower_0/decoder/BahdanauAttention/strided_slice/stack_1"
  input: "v/tower_0/decoder/BahdanauAttention/strided_slice/stack_2"
  device: "/gpu:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "v/decoder/memory_layer/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\004\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "v/decoder/memory_layer/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0625
      }
    }
  }
}
node {
  name: "v/decoder/memory_layer/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0625
      }
    }
  }
}
node {
  name: "v/decoder/memory_layer/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "v/decoder/memory_layer/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "v/decoder/memory_layer/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "v/decoder/memory_layer/kernel/Initializer/random_uniform/max"
  input: "v/decoder/memory_layer/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/decoder/memory_layer/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "v/decoder/memory_layer/kernel/Initializer/random_uniform/RandomUniform"
  input: "v/decoder/memory_layer/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/decoder/memory_layer/kernel/Initializer/random_uniform"
  op: "Add"
  input: "v/decoder/memory_layer/kernel/Initializer/random_uniform/mul"
  input: "v/decoder/memory_layer/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/decoder/memory_layer/kernel"
  op: "VariableV2"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "v/decoder/memory_layer/kernel/Assign"
  op: "Assign"
  input: "v/decoder/memory_layer/kernel"
  input: "v/decoder/memory_layer/kernel/Initializer/random_uniform"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "v/decoder/memory_layer/kernel/read"
  op: "Identity"
  input: "v/decoder/memory_layer/kernel"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/Shape"
  op: "Shape"
  input: "v/tower_0/encoder/concat"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/Rank"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/axes"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/GreaterEqual/y"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/GreaterEqual"
  op: "GreaterEqual"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/axes"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/GreaterEqual/y"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/Cast"
  op: "Cast"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/GreaterEqual"
  device: "/gpu:0"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/mul"
  op: "Mul"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/Cast"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/axes"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/Less/y"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/Less"
  op: "Less"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/axes"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/Less/y"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/Cast_1"
  op: "Cast"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/Less"
  device: "/gpu:0"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/add"
  op: "Add"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/axes"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/Rank"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/mul_1"
  op: "Mul"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/Cast_1"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/add"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/add_1"
  op: "Add"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/mul"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/mul_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/range/start"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/range/delta"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/range"
  op: "Range"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/range/start"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/Rank"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/range/delta"
  device: "/gpu:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/ListDiff"
  op: "ListDiff"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/range"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/add_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/GatherV2/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/GatherV2"
  op: "GatherV2"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/Shape"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/ListDiff"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/GatherV2/axis"
  device: "/gpu:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/GatherV2_1/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/GatherV2_1"
  op: "GatherV2"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/Shape"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/add_1"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/GatherV2_1/axis"
  device: "/gpu:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/Prod"
  op: "Prod"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/GatherV2"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/Const"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/Const_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/Prod_1"
  op: "Prod"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/GatherV2_1"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/Const_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/concat/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/concat"
  op: "ConcatV2"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/GatherV2_1"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/GatherV2"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/concat/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/concat_1/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/concat_1"
  op: "ConcatV2"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/ListDiff"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/add_1"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/concat_1/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/stack"
  op: "Pack"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/Prod"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/Prod_1"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/transpose"
  op: "Transpose"
  input: "v/tower_0/encoder/concat"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/concat_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/Reshape"
  op: "Reshape"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/transpose"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/stack"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/transpose_1/perm"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/transpose_1"
  op: "Transpose"
  input: "v/decoder/memory_layer/kernel/read"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/transpose_1/perm"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/Reshape_1/shape"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\004\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/Reshape_1"
  op: "Reshape"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/transpose_1"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/Reshape_1/shape"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/MatMul"
  op: "MatMul"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/Reshape"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/Reshape_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/Const_2"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/concat_2/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/concat_2"
  op: "ConcatV2"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/GatherV2"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/Const_2"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/concat_2/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot"
  op: "Reshape"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/MatMul"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot/concat_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/Shape_1"
  op: "Shape"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/strided_slice_1/stack"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/strided_slice_1/stack_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/strided_slice_1/stack_2"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/strided_slice_1"
  op: "StridedSlice"
  input: "v/tower_0/decoder/BahdanauAttention/Shape_1"
  input: "v/tower_0/decoder/BahdanauAttention/strided_slice_1/stack"
  input: "v/tower_0/decoder/BahdanauAttention/strided_slice_1/stack_1"
  input: "v/tower_0/decoder/BahdanauAttention/strided_slice_1/stack_2"
  device: "/gpu:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/Shape_2"
  op: "Shape"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/strided_slice_2/stack"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/strided_slice_2/stack_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/strided_slice_2/stack_2"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/BahdanauAttention/strided_slice_2"
  op: "StridedSlice"
  input: "v/tower_0/decoder/BahdanauAttention/Shape_2"
  input: "v/tower_0/decoder/BahdanauAttention/strided_slice_2/stack"
  input: "v/tower_0/decoder/BahdanauAttention/strided_slice_2/stack_1"
  input: "v/tower_0/decoder/BahdanauAttention/strided_slice_2/stack_2"
  device: "/gpu:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_1"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros"
  op: "Fill"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros/Const"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_2"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_3"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_4"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_5"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat_1/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_4"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_5"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat_1/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros_1/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/concat_1"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros_1/Const"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_6"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/Const_7"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/Const_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/concat/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/concat"
  op: "ConcatV2"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/Const"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/Const_1"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/concat/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/zeros/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/zeros"
  op: "Fill"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/concat"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/zeros/Const"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/Const_2"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/Const_3"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/Const_4"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/Const_5"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/concat_1/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/concat_1"
  op: "ConcatV2"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/Const_4"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/Const_5"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/concat_1/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/zeros_1/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/zeros_1"
  op: "Fill"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/concat_1"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/zeros_1/Const"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/Const_6"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/Const_7"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/Const_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/concat/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/concat"
  op: "ConcatV2"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/Const"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/Const_1"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/concat/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/zeros/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/zeros"
  op: "Fill"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/concat"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/zeros/Const"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/Const_2"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/Const_3"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/Const_4"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/Const_5"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/concat_1/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/concat_1"
  op: "ConcatV2"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/Const_4"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/Const_5"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/concat_1/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/zeros_1/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/zeros_1"
  op: "Fill"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/concat_1"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/zeros_1/Const"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/Const_6"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/Const_7"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_3/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_3/Const_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_3/concat/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_3/concat"
  op: "ConcatV2"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_3/Const"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_3/Const_1"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_3/concat/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_3/zeros/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_3/zeros"
  op: "Fill"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_3/concat"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_3/zeros/Const"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_3/Const_2"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_3/Const_3"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_3/Const_4"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_3/Const_5"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_3/concat_1/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_3/concat_1"
  op: "ConcatV2"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_3/Const_4"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_3/Const_5"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_3/concat_1/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_3/zeros_1/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_3/zeros_1"
  op: "Fill"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_3/concat_1"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_3/zeros_1/Const"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_3/Const_6"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_3/Const_7"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/assert_equal/x"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/assert_equal/Equal"
  op: "Equal"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/assert_equal/x"
  input: "v/tower_0/decoder/BahdanauAttention/strided_slice_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/assert_equal/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/assert_equal/All"
  op: "All"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/assert_equal/Equal"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/assert_equal/Const"
  device: "/gpu:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/assert_equal/Assert/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "When calling zero_state of AttentionWrapper Attention_Wrapper: Non-matching batch sizes between the memory (encoder output) and the requested batch size.  Are you using the BeamSearchDecoder?  If so, make sure your encoder output has been tiled to beam_width via tf.contrib.seq2seq.tile_batch, and the batch_size= argument passed to zero_state is batch_size * beam_width."
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/assert_equal/Assert/Const_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x == y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/assert_equal/Assert/Const_2"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (v/tower_0/decoder/AttentionWrapperZeroState/assert_equal/x:0) = "
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/assert_equal/Assert/Const_3"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (v/tower_0/decoder/BahdanauAttention/strided_slice_1:0) = "
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/assert_equal/Assert/Assert/data_0"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "When calling zero_state of AttentionWrapper Attention_Wrapper: Non-matching batch sizes between the memory (encoder output) and the requested batch size.  Are you using the BeamSearchDecoder?  If so, make sure your encoder output has been tiled to beam_width via tf.contrib.seq2seq.tile_batch, and the batch_size= argument passed to zero_state is batch_size * beam_width."
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/assert_equal/Assert/Assert/data_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x == y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/assert_equal/Assert/Assert/data_2"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (v/tower_0/decoder/AttentionWrapperZeroState/assert_equal/x:0) = "
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/assert_equal/Assert/Assert/data_4"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (v/tower_0/decoder/BahdanauAttention/strided_slice_1:0) = "
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/assert_equal/Assert/Assert"
  op: "Assert"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/assert_equal/All"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/assert_equal/Assert/Assert/data_0"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/assert_equal/Assert/Assert/data_1"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/assert_equal/Assert/Assert/data_2"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/assert_equal/x"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/assert_equal/Assert/Assert/data_4"
  input: "v/tower_0/decoder/BahdanauAttention/strided_slice_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/checked_cell_state"
  op: "Identity"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros"
  input: "^v/tower_0/decoder/AttentionWrapperZeroState/assert_equal/Assert/Assert"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/checked_cell_state_1"
  op: "Identity"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState/zeros_1"
  input: "^v/tower_0/decoder/AttentionWrapperZeroState/assert_equal/Assert/Assert"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/checked_cell_state_2"
  op: "Identity"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/zeros"
  input: "^v/tower_0/decoder/AttentionWrapperZeroState/assert_equal/Assert/Assert"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/checked_cell_state_3"
  op: "Identity"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_1/zeros_1"
  input: "^v/tower_0/decoder/AttentionWrapperZeroState/assert_equal/Assert/Assert"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/checked_cell_state_4"
  op: "Identity"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/zeros"
  input: "^v/tower_0/decoder/AttentionWrapperZeroState/assert_equal/Assert/Assert"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/checked_cell_state_5"
  op: "Identity"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_2/zeros_1"
  input: "^v/tower_0/decoder/AttentionWrapperZeroState/assert_equal/Assert/Assert"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/checked_cell_state_6"
  op: "Identity"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_3/zeros"
  input: "^v/tower_0/decoder/AttentionWrapperZeroState/assert_equal/Assert/Assert"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/checked_cell_state_7"
  op: "Identity"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/MultiRNNCellZeroState/BasicLSTMCellZeroState_3/zeros_1"
  input: "^v/tower_0/decoder/AttentionWrapperZeroState/assert_equal/Assert/Assert"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/ExpandDims/dim"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/ExpandDims"
  op: "ExpandDims"
  input: "v/tower_0/decoder/BahdanauAttention/strided_slice_2"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/ExpandDims/dim"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/concat/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/concat"
  op: "ConcatV2"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/Const"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/ExpandDims"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/concat/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/zeros/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/zeros"
  op: "Fill"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/concat"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/zeros/Const"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/Const_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/ExpandDims_1/dim"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/ExpandDims_1"
  op: "ExpandDims"
  input: "v/tower_0/decoder/BahdanauAttention/strided_slice_2"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/ExpandDims_1/dim"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/zeros_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/Const_2"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/Const_3"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/concat_1/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/concat_1"
  op: "ConcatV2"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/Const_2"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/Const_3"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/concat_1/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/zeros_2/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/zeros_2"
  op: "Fill"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/concat_1"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/zeros_2/Const"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/Const_4"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/Const_5"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/Const_6"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/ExpandDims_2/dim"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/ExpandDims_2"
  op: "ExpandDims"
  input: "v/tower_0/decoder/BahdanauAttention/strided_slice_2"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/ExpandDims_2/dim"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/concat_2/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/concat_2"
  op: "ConcatV2"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/Const_6"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/ExpandDims_2"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/concat_2/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/zeros_3/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/zeros_3"
  op: "Fill"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/concat_2"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/zeros_3/Const"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/Const_7"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/ExpandDims_3/dim"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/ExpandDims_3"
  op: "ExpandDims"
  input: "v/tower_0/decoder/BahdanauAttention/strided_slice_2"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/ExpandDims_3/dim"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_3/assert_shape/actual"
  op: "Shape"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_3"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_3/assert_shape/is_shape/Size/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_3/assert_shape/is_shape/Size"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_3/assert_shape/is_shape/is_rank/actual"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_3/assert_shape/is_shape/is_rank"
  op: "Equal"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_3/assert_shape/is_shape/Size"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_3/assert_shape/is_shape/is_rank/actual"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_3/assert_shape/is_shape/expected"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_3/assert_shape/is_shape/all_equal/equal"
  op: "Equal"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_3/assert_shape/is_shape/expected"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_3/assert_shape/actual"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_3/assert_shape/is_shape/all_equal/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_3/assert_shape/is_shape/all_equal"
  op: "All"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_3/assert_shape/is_shape/all_equal/equal"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_3/assert_shape/is_shape/all_equal/Const"
  device: "/gpu:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_3/assert_shape/is_shape"
  op: "LogicalAnd"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_3/assert_shape/is_shape/is_rank"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_3/assert_shape/is_shape/all_equal"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_3/assert_shape/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Wrong shape for v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_3:0 [expected] [actual]."
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_3/assert_shape/Const_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_3/assert_shape/Assert/data_0"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Wrong shape for v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_3:0 [expected] [actual]."
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_3/assert_shape/Assert/data_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_3/assert_shape/Assert"
  op: "Assert"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_3/assert_shape/is_shape"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_3/assert_shape/Assert/data_0"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_3/assert_shape/Assert/data_1"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_3/assert_shape/actual"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_3/Identity"
  op: "Identity"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_3"
  input: "^v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_3/assert_shape/Assert"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_4/assert_shape/actual"
  op: "Shape"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_4"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_4/assert_shape/is_shape/Size/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_4/assert_shape/is_shape/Size"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_4/assert_shape/is_shape/is_rank/actual"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_4/assert_shape/is_shape/is_rank"
  op: "Equal"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_4/assert_shape/is_shape/Size"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_4/assert_shape/is_shape/is_rank/actual"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_4/assert_shape/is_shape/expected"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_4/assert_shape/is_shape/all_equal/equal"
  op: "Equal"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_4/assert_shape/is_shape/expected"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_4/assert_shape/actual"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_4/assert_shape/is_shape/all_equal/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_4/assert_shape/is_shape/all_equal"
  op: "All"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_4/assert_shape/is_shape/all_equal/equal"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_4/assert_shape/is_shape/all_equal/Const"
  device: "/gpu:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_4/assert_shape/is_shape"
  op: "LogicalAnd"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_4/assert_shape/is_shape/is_rank"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_4/assert_shape/is_shape/all_equal"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_4/assert_shape/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Wrong shape for v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_4:0 [expected] [actual]."
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_4/assert_shape/Const_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_4/assert_shape/Assert/data_0"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Wrong shape for v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_4:0 [expected] [actual]."
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_4/assert_shape/Assert/data_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_4/assert_shape/Assert"
  op: "Assert"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_4/assert_shape/is_shape"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_4/assert_shape/Assert/data_0"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_4/assert_shape/Assert/data_1"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_4/assert_shape/actual"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_4/Identity"
  op: "Identity"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_4"
  input: "^v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_4/assert_shape/Assert"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_3/assert_shape/actual"
  op: "Shape"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_3"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_3/assert_shape/is_shape/Size/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_3/assert_shape/is_shape/Size"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_3/assert_shape/is_shape/is_rank/actual"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_3/assert_shape/is_shape/is_rank"
  op: "Equal"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_3/assert_shape/is_shape/Size"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_3/assert_shape/is_shape/is_rank/actual"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_3/assert_shape/is_shape/expected"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_3/assert_shape/is_shape/all_equal/equal"
  op: "Equal"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_3/assert_shape/is_shape/expected"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_3/assert_shape/actual"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_3/assert_shape/is_shape/all_equal/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_3/assert_shape/is_shape/all_equal"
  op: "All"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_3/assert_shape/is_shape/all_equal/equal"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_3/assert_shape/is_shape/all_equal/Const"
  device: "/gpu:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_3/assert_shape/is_shape"
  op: "LogicalAnd"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_3/assert_shape/is_shape/is_rank"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_3/assert_shape/is_shape/all_equal"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_3/assert_shape/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Wrong shape for v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_3:0 [expected] [actual]."
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_3/assert_shape/Const_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_3/assert_shape/Assert/data_0"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Wrong shape for v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_3:0 [expected] [actual]."
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_3/assert_shape/Assert/data_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_3/assert_shape/Assert"
  op: "Assert"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_3/assert_shape/is_shape"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_3/assert_shape/Assert/data_0"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_3/assert_shape/Assert/data_1"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_3/assert_shape/actual"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_3/Identity"
  op: "Identity"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_3"
  input: "^v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_3/assert_shape/Assert"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_4/assert_shape/actual"
  op: "Shape"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_4"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_4/assert_shape/is_shape/Size/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_4/assert_shape/is_shape/Size"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_4/assert_shape/is_shape/is_rank/actual"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_4/assert_shape/is_shape/is_rank"
  op: "Equal"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_4/assert_shape/is_shape/Size"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_4/assert_shape/is_shape/is_rank/actual"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_4/assert_shape/is_shape/expected"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_4/assert_shape/is_shape/all_equal/equal"
  op: "Equal"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_4/assert_shape/is_shape/expected"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_4/assert_shape/actual"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_4/assert_shape/is_shape/all_equal/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_4/assert_shape/is_shape/all_equal"
  op: "All"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_4/assert_shape/is_shape/all_equal/equal"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_4/assert_shape/is_shape/all_equal/Const"
  device: "/gpu:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_4/assert_shape/is_shape"
  op: "LogicalAnd"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_4/assert_shape/is_shape/is_rank"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_4/assert_shape/is_shape/all_equal"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_4/assert_shape/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Wrong shape for v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_4:0 [expected] [actual]."
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_4/assert_shape/Const_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_4/assert_shape/Assert/data_0"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Wrong shape for v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_4:0 [expected] [actual]."
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_4/assert_shape/Assert/data_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_4/assert_shape/Assert"
  op: "Assert"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_4/assert_shape/is_shape"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_4/assert_shape/Assert/data_0"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_4/assert_shape/Assert/data_1"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_4/assert_shape/actual"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_4/Identity"
  op: "Identity"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_4"
  input: "^v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_4/assert_shape/Assert"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_5/assert_shape/actual"
  op: "Shape"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_5"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_5/assert_shape/is_shape/Size/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_5/assert_shape/is_shape/Size"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_5/assert_shape/is_shape/is_rank/actual"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_5/assert_shape/is_shape/is_rank"
  op: "Equal"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_5/assert_shape/is_shape/Size"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_5/assert_shape/is_shape/is_rank/actual"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_5/assert_shape/is_shape/expected"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_5/assert_shape/is_shape/all_equal/equal"
  op: "Equal"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_5/assert_shape/is_shape/expected"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_5/assert_shape/actual"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_5/assert_shape/is_shape/all_equal/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_5/assert_shape/is_shape/all_equal"
  op: "All"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_5/assert_shape/is_shape/all_equal/equal"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_5/assert_shape/is_shape/all_equal/Const"
  device: "/gpu:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_5/assert_shape/is_shape"
  op: "LogicalAnd"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_5/assert_shape/is_shape/is_rank"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_5/assert_shape/is_shape/all_equal"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_5/assert_shape/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Wrong shape for v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_5:0 [expected] [actual]."
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_5/assert_shape/Const_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_5/assert_shape/Assert/data_0"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Wrong shape for v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_5:0 [expected] [actual]."
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_5/assert_shape/Assert/data_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_5/assert_shape/Assert"
  op: "Assert"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_5/assert_shape/is_shape"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_5/assert_shape/Assert/data_0"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_5/assert_shape/Assert/data_1"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_5/assert_shape/actual"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_5/Identity"
  op: "Identity"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_5"
  input: "^v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_5/assert_shape/Assert"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_6/assert_shape/actual"
  op: "Shape"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_6"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_6/assert_shape/is_shape/Size/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_6/assert_shape/is_shape/Size"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_6/assert_shape/is_shape/is_rank/actual"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_6/assert_shape/is_shape/is_rank"
  op: "Equal"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_6/assert_shape/is_shape/Size"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_6/assert_shape/is_shape/is_rank/actual"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_6/assert_shape/is_shape/expected"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_6/assert_shape/is_shape/all_equal/equal"
  op: "Equal"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_6/assert_shape/is_shape/expected"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_6/assert_shape/actual"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_6/assert_shape/is_shape/all_equal/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_6/assert_shape/is_shape/all_equal"
  op: "All"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_6/assert_shape/is_shape/all_equal/equal"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_6/assert_shape/is_shape/all_equal/Const"
  device: "/gpu:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_6/assert_shape/is_shape"
  op: "LogicalAnd"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_6/assert_shape/is_shape/is_rank"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_6/assert_shape/is_shape/all_equal"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_6/assert_shape/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Wrong shape for v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_6:0 [expected] [actual]."
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_6/assert_shape/Const_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_6/assert_shape/Assert/data_0"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Wrong shape for v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_6:0 [expected] [actual]."
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_6/assert_shape/Assert/data_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_6/assert_shape/Assert"
  op: "Assert"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_6/assert_shape/is_shape"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_6/assert_shape/Assert/data_0"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_6/assert_shape/Assert/data_1"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_6/assert_shape/actual"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_6/Identity"
  op: "Identity"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_6"
  input: "^v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_6/assert_shape/Assert"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_5/assert_shape/actual"
  op: "Shape"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_5"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_5/assert_shape/is_shape/Size/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_5/assert_shape/is_shape/Size"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_5/assert_shape/is_shape/is_rank/actual"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_5/assert_shape/is_shape/is_rank"
  op: "Equal"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_5/assert_shape/is_shape/Size"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_5/assert_shape/is_shape/is_rank/actual"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_5/assert_shape/is_shape/expected"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_5/assert_shape/is_shape/all_equal/equal"
  op: "Equal"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_5/assert_shape/is_shape/expected"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_5/assert_shape/actual"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_5/assert_shape/is_shape/all_equal/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_5/assert_shape/is_shape/all_equal"
  op: "All"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_5/assert_shape/is_shape/all_equal/equal"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_5/assert_shape/is_shape/all_equal/Const"
  device: "/gpu:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_5/assert_shape/is_shape"
  op: "LogicalAnd"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_5/assert_shape/is_shape/is_rank"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_5/assert_shape/is_shape/all_equal"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_5/assert_shape/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Wrong shape for v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_5:0 [expected] [actual]."
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_5/assert_shape/Const_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_5/assert_shape/Assert/data_0"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Wrong shape for v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_5:0 [expected] [actual]."
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_5/assert_shape/Assert/data_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_5/assert_shape/Assert"
  op: "Assert"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_5/assert_shape/is_shape"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_5/assert_shape/Assert/data_0"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_5/assert_shape/Assert/data_1"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_5/assert_shape/actual"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_5/Identity"
  op: "Identity"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_5"
  input: "^v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_5/assert_shape/Assert"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_6/assert_shape/actual"
  op: "Shape"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_6"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_6/assert_shape/is_shape/Size/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_6/assert_shape/is_shape/Size"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_6/assert_shape/is_shape/is_rank/actual"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_6/assert_shape/is_shape/is_rank"
  op: "Equal"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_6/assert_shape/is_shape/Size"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_6/assert_shape/is_shape/is_rank/actual"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_6/assert_shape/is_shape/expected"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_6/assert_shape/is_shape/all_equal/equal"
  op: "Equal"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_6/assert_shape/is_shape/expected"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_6/assert_shape/actual"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_6/assert_shape/is_shape/all_equal/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_6/assert_shape/is_shape/all_equal"
  op: "All"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_6/assert_shape/is_shape/all_equal/equal"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_6/assert_shape/is_shape/all_equal/Const"
  device: "/gpu:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_6/assert_shape/is_shape"
  op: "LogicalAnd"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_6/assert_shape/is_shape/is_rank"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_6/assert_shape/is_shape/all_equal"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_6/assert_shape/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Wrong shape for v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_6:0 [expected] [actual]."
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_6/assert_shape/Const_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_6/assert_shape/Assert/data_0"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Wrong shape for v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_6:0 [expected] [actual]."
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_6/assert_shape/Assert/data_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_6/assert_shape/Assert"
  op: "Assert"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_6/assert_shape/is_shape"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_6/assert_shape/Assert/data_0"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_6/assert_shape/Assert/data_1"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_6/assert_shape/actual"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_6/Identity"
  op: "Identity"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_6"
  input: "^v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_6/assert_shape/Assert"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/zeros/expected_shape"
  op: "Shape"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/zeros"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/zeros/assert_shape/actual"
  op: "Shape"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/zeros"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/zeros/assert_shape/is_shape/Size"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/zeros/assert_shape/is_shape/is_rank/actual"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/zeros/assert_shape/is_shape/is_rank"
  op: "Equal"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/zeros/assert_shape/is_shape/Size"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/zeros/assert_shape/is_shape/is_rank/actual"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/zeros/assert_shape/is_shape/all_equal/equal"
  op: "Equal"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/zeros/expected_shape"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/zeros/assert_shape/actual"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/zeros/assert_shape/is_shape/all_equal/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/zeros/assert_shape/is_shape/all_equal"
  op: "All"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/zeros/assert_shape/is_shape/all_equal/equal"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/zeros/assert_shape/is_shape/all_equal/Const"
  device: "/gpu:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/zeros/assert_shape/is_shape"
  op: "LogicalAnd"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/zeros/assert_shape/is_shape/is_rank"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/zeros/assert_shape/is_shape/all_equal"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/zeros/assert_shape/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Wrong shape for v/tower_0/decoder/AttentionWrapperZeroState/zeros:0 [expected] [actual]."
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/zeros/assert_shape/Assert/data_0"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Wrong shape for v/tower_0/decoder/AttentionWrapperZeroState/zeros:0 [expected] [actual]."
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/zeros/assert_shape/Assert"
  op: "Assert"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/zeros/assert_shape/is_shape"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/zeros/assert_shape/Assert/data_0"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/zeros/expected_shape"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/zeros/assert_shape/actual"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/zeros/Identity"
  op: "Identity"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/zeros"
  input: "^v/tower_0/decoder/AttentionWrapperZeroState/zeros/assert_shape/Assert"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/zeros_3/expected_shape"
  op: "Shape"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/zeros_3"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/zeros_3/assert_shape/actual"
  op: "Shape"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/zeros_3"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/zeros_3/assert_shape/is_shape/Size"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/zeros_3/assert_shape/is_shape/is_rank/actual"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/zeros_3/assert_shape/is_shape/is_rank"
  op: "Equal"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/zeros_3/assert_shape/is_shape/Size"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/zeros_3/assert_shape/is_shape/is_rank/actual"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/zeros_3/assert_shape/is_shape/all_equal/equal"
  op: "Equal"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/zeros_3/expected_shape"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/zeros_3/assert_shape/actual"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/zeros_3/assert_shape/is_shape/all_equal/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/zeros_3/assert_shape/is_shape/all_equal"
  op: "All"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/zeros_3/assert_shape/is_shape/all_equal/equal"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/zeros_3/assert_shape/is_shape/all_equal/Const"
  device: "/gpu:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/zeros_3/assert_shape/is_shape"
  op: "LogicalAnd"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/zeros_3/assert_shape/is_shape/is_rank"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/zeros_3/assert_shape/is_shape/all_equal"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/zeros_3/assert_shape/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Wrong shape for v/tower_0/decoder/AttentionWrapperZeroState/zeros_3:0 [expected] [actual]."
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/zeros_3/assert_shape/Assert/data_0"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Wrong shape for v/tower_0/decoder/AttentionWrapperZeroState/zeros_3:0 [expected] [actual]."
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/zeros_3/assert_shape/Assert"
  op: "Assert"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/zeros_3/assert_shape/is_shape"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/zeros_3/assert_shape/Assert/data_0"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/zeros_3/expected_shape"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/zeros_3/assert_shape/actual"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "v/tower_0/decoder/AttentionWrapperZeroState/zeros_3/Identity"
  op: "Identity"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/zeros_3"
  input: "^v/tower_0/decoder/AttentionWrapperZeroState/zeros_3/assert_shape/Assert"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/decoder/tgt_embedding/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/tgt_embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "P\303\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "v/decoder/tgt_embedding/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/tgt_embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.010898791253566742
      }
    }
  }
}
node {
  name: "v/decoder/tgt_embedding/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/tgt_embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.010898791253566742
      }
    }
  }
}
node {
  name: "v/decoder/tgt_embedding/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "v/decoder/tgt_embedding/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/tgt_embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50000
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "v/decoder/tgt_embedding/Initializer/random_uniform/sub"
  op: "Sub"
  input: "v/decoder/tgt_embedding/Initializer/random_uniform/max"
  input: "v/decoder/tgt_embedding/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/tgt_embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/decoder/tgt_embedding/Initializer/random_uniform/mul"
  op: "Mul"
  input: "v/decoder/tgt_embedding/Initializer/random_uniform/RandomUniform"
  input: "v/decoder/tgt_embedding/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/tgt_embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50000
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/decoder/tgt_embedding/Initializer/random_uniform"
  op: "Add"
  input: "v/decoder/tgt_embedding/Initializer/random_uniform/mul"
  input: "v/decoder/tgt_embedding/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/tgt_embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50000
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/decoder/tgt_embedding"
  op: "VariableV2"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/tgt_embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50000
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 50000
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "v/decoder/tgt_embedding/Assign"
  op: "Assign"
  input: "v/decoder/tgt_embedding"
  input: "v/decoder/tgt_embedding/Initializer/random_uniform"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/tgt_embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50000
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "v/decoder/tgt_embedding/read"
  op: "Identity"
  input: "v/decoder/tgt_embedding"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/tgt_embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50000
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/embedding_lookup/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/tgt_embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/embedding_lookup"
  op: "GatherV2"
  input: "v/decoder/tgt_embedding/read"
  input: "IteratorGetNext:1"
  input: "v/tower_0/decoder/embedding_lookup/axis"
  device: "/gpu:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/tgt_embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/TrainingHelper/Rank"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/TrainingHelper/range/start"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/TrainingHelper/range/delta"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/TrainingHelper/range"
  op: "Range"
  input: "v/tower_0/decoder/TrainingHelper/range/start"
  input: "v/tower_0/decoder/TrainingHelper/Rank"
  input: "v/tower_0/decoder/TrainingHelper/range/delta"
  device: "/gpu:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/TrainingHelper/concat/values_0"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/TrainingHelper/concat/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/TrainingHelper/concat"
  op: "ConcatV2"
  input: "v/tower_0/decoder/TrainingHelper/concat/values_0"
  input: "v/tower_0/decoder/TrainingHelper/range"
  input: "v/tower_0/decoder/TrainingHelper/concat/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/TrainingHelper/transpose"
  op: "Transpose"
  input: "v/tower_0/decoder/embedding_lookup"
  input: "v/tower_0/decoder/TrainingHelper/concat"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/TrainingHelper/Shape"
  op: "Shape"
  input: "v/tower_0/decoder/TrainingHelper/transpose"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/decoder/TrainingHelper/strided_slice/stack"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/TrainingHelper/strided_slice/stack_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/TrainingHelper/strided_slice/stack_2"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/TrainingHelper/strided_slice"
  op: "StridedSlice"
  input: "v/tower_0/decoder/TrainingHelper/Shape"
  input: "v/tower_0/decoder/TrainingHelper/strided_slice/stack"
  input: "v/tower_0/decoder/TrainingHelper/strided_slice/stack_1"
  input: "v/tower_0/decoder/TrainingHelper/strided_slice/stack_2"
  device: "/gpu:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "v/tower_0/decoder/TrainingHelper/TensorArray"
  op: "TensorArrayV3"
  input: "v/tower_0/decoder/TrainingHelper/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "v/tower_0/decoder/TrainingHelper/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "v/tower_0/decoder/TrainingHelper/transpose"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/decoder/TrainingHelper/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/TrainingHelper/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/TrainingHelper/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/TrainingHelper/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "v/tower_0/decoder/TrainingHelper/TensorArrayUnstack/Shape"
  input: "v/tower_0/decoder/TrainingHelper/TensorArrayUnstack/strided_slice/stack"
  input: "v/tower_0/decoder/TrainingHelper/TensorArrayUnstack/strided_slice/stack_1"
  input: "v/tower_0/decoder/TrainingHelper/TensorArrayUnstack/strided_slice/stack_2"
  device: "/gpu:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "v/tower_0/decoder/TrainingHelper/TensorArrayUnstack/range/start"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/TrainingHelper/TensorArrayUnstack/range/delta"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/TrainingHelper/TensorArrayUnstack/range"
  op: "Range"
  input: "v/tower_0/decoder/TrainingHelper/TensorArrayUnstack/range/start"
  input: "v/tower_0/decoder/TrainingHelper/TensorArrayUnstack/strided_slice"
  input: "v/tower_0/decoder/TrainingHelper/TensorArrayUnstack/range/delta"
  device: "/gpu:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "v/tower_0/decoder/TrainingHelper/TensorArray"
  input: "v/tower_0/decoder/TrainingHelper/TensorArrayUnstack/range"
  input: "v/tower_0/decoder/TrainingHelper/transpose"
  input: "v/tower_0/decoder/TrainingHelper/TensorArray:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/decoder/TrainingHelper/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/TrainingHelper/strided_slice_1/stack"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/TrainingHelper/strided_slice_1/stack_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/TrainingHelper/strided_slice_1/stack_2"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/TrainingHelper/strided_slice_1"
  op: "StridedSlice"
  input: "v/tower_0/decoder/TrainingHelper/transpose"
  input: "v/tower_0/decoder/TrainingHelper/strided_slice_1/stack"
  input: "v/tower_0/decoder/TrainingHelper/strided_slice_1/stack_1"
  input: "v/tower_0/decoder/TrainingHelper/strided_slice_1/stack_2"
  device: "/gpu:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 2
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "v/tower_0/decoder/TrainingHelper/zeros_like"
  op: "ZerosLike"
  input: "v/tower_0/decoder/TrainingHelper/strided_slice_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/TrainingHelper/Size"
  op: "Size"
  input: "IteratorGetNext:4"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/TrainingHelperInitialize/Equal/x"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/TrainingHelperInitialize/Equal"
  op: "Equal"
  input: "v/tower_0/decoder/decoder/TrainingHelperInitialize/Equal/x"
  input: "IteratorGetNext:4"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/TrainingHelperInitialize/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/TrainingHelperInitialize/All"
  op: "All"
  input: "v/tower_0/decoder/decoder/TrainingHelperInitialize/Equal"
  input: "v/tower_0/decoder/decoder/TrainingHelperInitialize/Const"
  device: "/gpu:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/TrainingHelperInitialize/cond/Switch"
  op: "Switch"
  input: "v/tower_0/decoder/decoder/TrainingHelperInitialize/All"
  input: "v/tower_0/decoder/decoder/TrainingHelperInitialize/All"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/TrainingHelperInitialize/cond/switch_t"
  op: "Identity"
  input: "v/tower_0/decoder/decoder/TrainingHelperInitialize/cond/Switch:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/TrainingHelperInitialize/cond/switch_f"
  op: "Identity"
  input: "v/tower_0/decoder/decoder/TrainingHelperInitialize/cond/Switch"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/TrainingHelperInitialize/cond/pred_id"
  op: "Identity"
  input: "v/tower_0/decoder/decoder/TrainingHelperInitialize/All"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/TrainingHelperInitialize/cond/Switch_1"
  op: "Switch"
  input: "v/tower_0/decoder/TrainingHelper/zeros_like"
  input: "v/tower_0/decoder/decoder/TrainingHelperInitialize/cond/pred_id"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/decoder/TrainingHelper/zeros_like"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/index"
  op: "Const"
  input: "^v/tower_0/decoder/decoder/TrainingHelperInitialize/cond/switch_f"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "v/tower_0/decoder/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch"
  input: "v/tower_0/decoder/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/index"
  input: "v/tower_0/decoder/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch_1"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch"
  op: "Switch"
  input: "v/tower_0/decoder/TrainingHelper/TensorArray"
  input: "v/tower_0/decoder/decoder/TrainingHelperInitialize/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/decoder/TrainingHelper/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3/Switch_1"
  op: "Switch"
  input: "v/tower_0/decoder/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  input: "v/tower_0/decoder/decoder/TrainingHelperInitialize/cond/pred_id"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/decoder/TrainingHelper/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/TrainingHelperInitialize/cond/Merge"
  op: "Merge"
  input: "v/tower_0/decoder/decoder/TrainingHelperInitialize/cond/TensorArrayReadV3"
  input: "v/tower_0/decoder/decoder/TrainingHelperInitialize/cond/Switch_1:1"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/ExpandDims/dim"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/ExpandDims"
  op: "ExpandDims"
  input: "v/tower_0/decoder/TrainingHelper/Size"
  input: "v/tower_0/decoder/decoder/ExpandDims/dim"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/concat/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/concat"
  op: "ConcatV2"
  input: "v/tower_0/decoder/decoder/ExpandDims"
  input: "v/tower_0/decoder/decoder/Const"
  input: "v/tower_0/decoder/decoder/concat/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/zeros/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/zeros"
  op: "Fill"
  input: "v/tower_0/decoder/decoder/concat"
  input: "v/tower_0/decoder/decoder/zeros/Const"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/ExpandDims_1/dim"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/ExpandDims_1"
  op: "ExpandDims"
  input: "v/tower_0/decoder/TrainingHelper/Size"
  input: "v/tower_0/decoder/decoder/ExpandDims_1/dim"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/Const_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/ExpandDims_2/dim"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/ExpandDims_2"
  op: "ExpandDims"
  input: "v/tower_0/decoder/TrainingHelper/Size"
  input: "v/tower_0/decoder/decoder/ExpandDims_2/dim"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/Const_2"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/concat_1/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/concat_1"
  op: "ConcatV2"
  input: "v/tower_0/decoder/decoder/ExpandDims_2"
  input: "v/tower_0/decoder/decoder/Const_2"
  input: "v/tower_0/decoder/decoder/concat_1/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/zeros_1/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/zeros_1"
  op: "Fill"
  input: "v/tower_0/decoder/decoder/concat_1"
  input: "v/tower_0/decoder/decoder/zeros_1/Const"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/ExpandDims_3/dim"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/ExpandDims_3"
  op: "ExpandDims"
  input: "v/tower_0/decoder/TrainingHelper/Size"
  input: "v/tower_0/decoder/decoder/ExpandDims_3/dim"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/Const_3"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/zeros_like/Shape"
  op: "Shape"
  input: "v/tower_0/decoder/decoder/TrainingHelperInitialize/Equal"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/zeros_like/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/zeros_like"
  op: "Fill"
  input: "v/tower_0/decoder/decoder/zeros_like/Shape"
  input: "v/tower_0/decoder/decoder/zeros_like/Const"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/Const_4"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/TensorArray/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/TensorArray"
  op: "TensorArrayV3"
  input: "v/tower_0/decoder/decoder/TensorArray/size"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: true
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/TensorArray_1/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/TensorArray_1"
  op: "TensorArrayV3"
  input: "v/tower_0/decoder/decoder/TensorArray_1/size"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: true
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Enter"
  op: "Enter"
  input: "v/tower_0/decoder/decoder/Const_4"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/decoder/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Enter_1"
  op: "Enter"
  input: "v/tower_0/decoder/decoder/TensorArray:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/decoder/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Enter_2"
  op: "Enter"
  input: "v/tower_0/decoder/decoder/TensorArray_1:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/decoder/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Enter_3"
  op: "Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_3/Identity"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/decoder/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Enter_4"
  op: "Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_4/Identity"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/decoder/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Enter_5"
  op: "Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_3/Identity"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/decoder/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Enter_6"
  op: "Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_4/Identity"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/decoder/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Enter_7"
  op: "Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_5/Identity"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/decoder/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Enter_8"
  op: "Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/fw/fw/while/Exit_6/Identity"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/decoder/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Enter_9"
  op: "Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_5/Identity"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/decoder/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Enter_10"
  op: "Enter"
  input: "v/tower_0/encoder/bidirectional_rnn/bw/bw/while/Exit_6/Identity"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/decoder/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Enter_11"
  op: "Enter"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/zeros_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/decoder/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Enter_12"
  op: "Enter"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/zeros_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/decoder/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Enter_13"
  op: "Enter"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/zeros/Identity"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/decoder/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Enter_14"
  op: "Enter"
  input: "v/tower_0/decoder/AttentionWrapperZeroState/zeros_3/Identity"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/decoder/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Enter_15"
  op: "Enter"
  input: "v/tower_0/decoder/decoder/TrainingHelperInitialize/cond/Merge"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/decoder/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Enter_16"
  op: "Enter"
  input: "v/tower_0/decoder/decoder/TrainingHelperInitialize/Equal"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/decoder/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Enter_17"
  op: "Enter"
  input: "v/tower_0/decoder/decoder/zeros_like"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/decoder/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Merge"
  op: "Merge"
  input: "v/tower_0/decoder/decoder/while/Enter"
  input: "v/tower_0/decoder/decoder/while/NextIteration"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Merge_1"
  op: "Merge"
  input: "v/tower_0/decoder/decoder/while/Enter_1"
  input: "v/tower_0/decoder/decoder/while/NextIteration_1"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Merge_2"
  op: "Merge"
  input: "v/tower_0/decoder/decoder/while/Enter_2"
  input: "v/tower_0/decoder/decoder/while/NextIteration_2"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Merge_3"
  op: "Merge"
  input: "v/tower_0/decoder/decoder/while/Enter_3"
  input: "v/tower_0/decoder/decoder/while/NextIteration_3"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Merge_4"
  op: "Merge"
  input: "v/tower_0/decoder/decoder/while/Enter_4"
  input: "v/tower_0/decoder/decoder/while/NextIteration_4"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Merge_5"
  op: "Merge"
  input: "v/tower_0/decoder/decoder/while/Enter_5"
  input: "v/tower_0/decoder/decoder/while/NextIteration_5"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Merge_6"
  op: "Merge"
  input: "v/tower_0/decoder/decoder/while/Enter_6"
  input: "v/tower_0/decoder/decoder/while/NextIteration_6"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Merge_7"
  op: "Merge"
  input: "v/tower_0/decoder/decoder/while/Enter_7"
  input: "v/tower_0/decoder/decoder/while/NextIteration_7"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Merge_8"
  op: "Merge"
  input: "v/tower_0/decoder/decoder/while/Enter_8"
  input: "v/tower_0/decoder/decoder/while/NextIteration_8"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Merge_9"
  op: "Merge"
  input: "v/tower_0/decoder/decoder/while/Enter_9"
  input: "v/tower_0/decoder/decoder/while/NextIteration_9"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Merge_10"
  op: "Merge"
  input: "v/tower_0/decoder/decoder/while/Enter_10"
  input: "v/tower_0/decoder/decoder/while/NextIteration_10"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Merge_11"
  op: "Merge"
  input: "v/tower_0/decoder/decoder/while/Enter_11"
  input: "v/tower_0/decoder/decoder/while/NextIteration_11"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Merge_12"
  op: "Merge"
  input: "v/tower_0/decoder/decoder/while/Enter_12"
  input: "v/tower_0/decoder/decoder/while/NextIteration_12"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Merge_13"
  op: "Merge"
  input: "v/tower_0/decoder/decoder/while/Enter_13"
  input: "v/tower_0/decoder/decoder/while/NextIteration_13"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Merge_14"
  op: "Merge"
  input: "v/tower_0/decoder/decoder/while/Enter_14"
  input: "v/tower_0/decoder/decoder/while/NextIteration_14"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Merge_15"
  op: "Merge"
  input: "v/tower_0/decoder/decoder/while/Enter_15"
  input: "v/tower_0/decoder/decoder/while/NextIteration_15"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Merge_16"
  op: "Merge"
  input: "v/tower_0/decoder/decoder/while/Enter_16"
  input: "v/tower_0/decoder/decoder/while/NextIteration_16"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Merge_17"
  op: "Merge"
  input: "v/tower_0/decoder/decoder/while/Enter_17"
  input: "v/tower_0/decoder/decoder/while/NextIteration_17"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Const"
  op: "Const"
  input: "^v/tower_0/decoder/decoder/while/Merge"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/All"
  op: "All"
  input: "v/tower_0/decoder/decoder/while/Merge_16"
  input: "v/tower_0/decoder/decoder/while/Const"
  device: "/gpu:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/LogicalNot"
  op: "LogicalNot"
  input: "v/tower_0/decoder/decoder/while/All"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/LoopCond"
  op: "LoopCond"
  input: "v/tower_0/decoder/decoder/while/LogicalNot"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Switch"
  op: "Switch"
  input: "v/tower_0/decoder/decoder/while/Merge"
  input: "v/tower_0/decoder/decoder/while/LoopCond"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/decoder/decoder/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Switch_1"
  op: "Switch"
  input: "v/tower_0/decoder/decoder/while/Merge_1"
  input: "v/tower_0/decoder/decoder/while/LoopCond"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/decoder/decoder/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Switch_2"
  op: "Switch"
  input: "v/tower_0/decoder/decoder/while/Merge_2"
  input: "v/tower_0/decoder/decoder/while/LoopCond"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/decoder/decoder/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Switch_3"
  op: "Switch"
  input: "v/tower_0/decoder/decoder/while/Merge_3"
  input: "v/tower_0/decoder/decoder/while/LoopCond"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/decoder/decoder/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Switch_4"
  op: "Switch"
  input: "v/tower_0/decoder/decoder/while/Merge_4"
  input: "v/tower_0/decoder/decoder/while/LoopCond"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/decoder/decoder/while/Merge_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Switch_5"
  op: "Switch"
  input: "v/tower_0/decoder/decoder/while/Merge_5"
  input: "v/tower_0/decoder/decoder/while/LoopCond"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/decoder/decoder/while/Merge_5"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Switch_6"
  op: "Switch"
  input: "v/tower_0/decoder/decoder/while/Merge_6"
  input: "v/tower_0/decoder/decoder/while/LoopCond"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/decoder/decoder/while/Merge_6"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Switch_7"
  op: "Switch"
  input: "v/tower_0/decoder/decoder/while/Merge_7"
  input: "v/tower_0/decoder/decoder/while/LoopCond"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/decoder/decoder/while/Merge_7"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Switch_8"
  op: "Switch"
  input: "v/tower_0/decoder/decoder/while/Merge_8"
  input: "v/tower_0/decoder/decoder/while/LoopCond"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/decoder/decoder/while/Merge_8"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Switch_9"
  op: "Switch"
  input: "v/tower_0/decoder/decoder/while/Merge_9"
  input: "v/tower_0/decoder/decoder/while/LoopCond"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/decoder/decoder/while/Merge_9"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Switch_10"
  op: "Switch"
  input: "v/tower_0/decoder/decoder/while/Merge_10"
  input: "v/tower_0/decoder/decoder/while/LoopCond"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/decoder/decoder/while/Merge_10"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Switch_11"
  op: "Switch"
  input: "v/tower_0/decoder/decoder/while/Merge_11"
  input: "v/tower_0/decoder/decoder/while/LoopCond"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/decoder/decoder/while/Merge_11"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Switch_12"
  op: "Switch"
  input: "v/tower_0/decoder/decoder/while/Merge_12"
  input: "v/tower_0/decoder/decoder/while/LoopCond"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/decoder/decoder/while/Merge_12"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Switch_13"
  op: "Switch"
  input: "v/tower_0/decoder/decoder/while/Merge_13"
  input: "v/tower_0/decoder/decoder/while/LoopCond"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/decoder/decoder/while/Merge_13"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Switch_14"
  op: "Switch"
  input: "v/tower_0/decoder/decoder/while/Merge_14"
  input: "v/tower_0/decoder/decoder/while/LoopCond"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/decoder/decoder/while/Merge_14"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Switch_15"
  op: "Switch"
  input: "v/tower_0/decoder/decoder/while/Merge_15"
  input: "v/tower_0/decoder/decoder/while/LoopCond"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/decoder/decoder/while/Merge_15"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Switch_16"
  op: "Switch"
  input: "v/tower_0/decoder/decoder/while/Merge_16"
  input: "v/tower_0/decoder/decoder/while/LoopCond"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/decoder/decoder/while/Merge_16"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Switch_17"
  op: "Switch"
  input: "v/tower_0/decoder/decoder/while/Merge_17"
  input: "v/tower_0/decoder/decoder/while/LoopCond"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/decoder/decoder/while/Merge_17"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Identity"
  op: "Identity"
  input: "v/tower_0/decoder/decoder/while/Switch:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Identity_1"
  op: "Identity"
  input: "v/tower_0/decoder/decoder/while/Switch_1:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Identity_2"
  op: "Identity"
  input: "v/tower_0/decoder/decoder/while/Switch_2:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Identity_3"
  op: "Identity"
  input: "v/tower_0/decoder/decoder/while/Switch_3:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Identity_4"
  op: "Identity"
  input: "v/tower_0/decoder/decoder/while/Switch_4:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Identity_5"
  op: "Identity"
  input: "v/tower_0/decoder/decoder/while/Switch_5:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Identity_6"
  op: "Identity"
  input: "v/tower_0/decoder/decoder/while/Switch_6:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Identity_7"
  op: "Identity"
  input: "v/tower_0/decoder/decoder/while/Switch_7:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Identity_8"
  op: "Identity"
  input: "v/tower_0/decoder/decoder/while/Switch_8:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Identity_9"
  op: "Identity"
  input: "v/tower_0/decoder/decoder/while/Switch_9:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Identity_10"
  op: "Identity"
  input: "v/tower_0/decoder/decoder/while/Switch_10:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Identity_11"
  op: "Identity"
  input: "v/tower_0/decoder/decoder/while/Switch_11:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Identity_12"
  op: "Identity"
  input: "v/tower_0/decoder/decoder/while/Switch_12:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Identity_13"
  op: "Identity"
  input: "v/tower_0/decoder/decoder/while/Switch_13:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Identity_14"
  op: "Identity"
  input: "v/tower_0/decoder/decoder/while/Switch_14:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Identity_15"
  op: "Identity"
  input: "v/tower_0/decoder/decoder/while/Switch_15:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Identity_16"
  op: "Identity"
  input: "v/tower_0/decoder/decoder/while/Switch_16:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Identity_17"
  op: "Identity"
  input: "v/tower_0/decoder/decoder/while/Switch_17:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/concat/axis"
  op: "Const"
  input: "^v/tower_0/decoder/decoder/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/concat"
  op: "ConcatV2"
  input: "v/tower_0/decoder/decoder/while/Identity_15"
  input: "v/tower_0/decoder/decoder/while/Identity_11"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/concat/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\006\000\000\000\010\000\000"
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.04091585427522659
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.04091585427522659
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1536
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1536
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1536
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  op: "VariableV2"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1536
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1536
        }
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Assign"
  op: "Assign"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Initializer/random_uniform"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1536
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/read"
  op: "Identity"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1536
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2048
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Initializer/zeros"
  op: "Fill"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Initializer/zeros/shape_as_tensor"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  op: "VariableV2"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Assign"
  op: "Assign"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Initializer/zeros"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/bias/read"
  op: "Identity"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/Const"
  op: "Const"
  input: "^v/tower_0/decoder/decoder/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/concat/axis"
  op: "Const"
  input: "^v/tower_0/decoder/decoder/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/concat"
  op: "ConcatV2"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/concat"
  input: "v/tower_0/decoder/decoder/while/Identity_4"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/concat/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1536
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul"
  op: "MatMul"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/concat"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul/Enter"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/read"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1536
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/decoder/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/MatMul"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd/Enter"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/bias/read"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/decoder/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/Const_1"
  op: "Const"
  input: "^v/tower_0/decoder/decoder/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/split"
  op: "Split"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/Const"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/BiasAdd"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/Const_2"
  op: "Const"
  input: "^v/tower_0/decoder/decoder/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.800000011920929
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/Add"
  op: "Add"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/split:2"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/Const_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/Add"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/Mul"
  op: "Mul"
  input: "v/tower_0/decoder/decoder/while/Identity_3"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/split"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/Tanh"
  op: "Tanh"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/split:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1"
  op: "Mul"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid_1"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/Tanh"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1"
  op: "Add"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/Mul"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/Tanh_1"
  op: "Tanh"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/split:3"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2"
  op: "Mul"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/Tanh_1"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/Sigmoid_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\004\000\000\000\010\000\000"
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.04419417306780815
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.04419417306780815
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
  op: "VariableV2"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Assign"
  op: "Assign"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Initializer/random_uniform"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/read"
  op: "Identity"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2048
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Initializer/zeros"
  op: "Fill"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Initializer/zeros/shape_as_tensor"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
  op: "VariableV2"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Assign"
  op: "Assign"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Initializer/zeros"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/bias/read"
  op: "Identity"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/Const"
  op: "Const"
  input: "^v/tower_0/decoder/decoder/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/concat/axis"
  op: "Const"
  input: "^v/tower_0/decoder/decoder/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/concat"
  op: "ConcatV2"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2"
  input: "v/tower_0/decoder/decoder/while/Identity_6"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/concat/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul"
  op: "MatMul"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/concat"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul/Enter"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/read"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/decoder/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/MatMul"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd/Enter"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/bias/read"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/decoder/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/Const_1"
  op: "Const"
  input: "^v/tower_0/decoder/decoder/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/split"
  op: "Split"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/Const"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/BiasAdd"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/Const_2"
  op: "Const"
  input: "^v/tower_0/decoder/decoder/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.800000011920929
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/Add"
  op: "Add"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/split:2"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/Const_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/Add"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/Mul"
  op: "Mul"
  input: "v/tower_0/decoder/decoder/while/Identity_5"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/split"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/Tanh"
  op: "Tanh"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/split:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1"
  op: "Mul"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid_1"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/Tanh"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1"
  op: "Add"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/Mul"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/Tanh_1"
  op: "Tanh"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/split:3"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2"
  op: "Mul"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/Tanh_1"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/Sigmoid_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\004\000\000\000\010\000\000"
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.04419417306780815
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.04419417306780815
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
  op: "VariableV2"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Assign"
  op: "Assign"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Initializer/random_uniform"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/read"
  op: "Identity"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2048
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Initializer/zeros"
  op: "Fill"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Initializer/zeros/shape_as_tensor"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
  op: "VariableV2"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Assign"
  op: "Assign"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Initializer/zeros"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/bias/read"
  op: "Identity"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/Const"
  op: "Const"
  input: "^v/tower_0/decoder/decoder/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/concat/axis"
  op: "Const"
  input: "^v/tower_0/decoder/decoder/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/concat"
  op: "ConcatV2"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2"
  input: "v/tower_0/decoder/decoder/while/Identity_8"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/concat/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul"
  op: "MatMul"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/concat"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul/Enter"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/read"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/decoder/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/MatMul"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/BiasAdd/Enter"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/bias/read"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/decoder/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/Const_1"
  op: "Const"
  input: "^v/tower_0/decoder/decoder/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/split"
  op: "Split"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/Const"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/BiasAdd"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/Const_2"
  op: "Const"
  input: "^v/tower_0/decoder/decoder/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.800000011920929
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/Add"
  op: "Add"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/split:2"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/Const_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/Add"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/Mul"
  op: "Mul"
  input: "v/tower_0/decoder/decoder/while/Identity_7"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/Sigmoid"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/split"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/Tanh"
  op: "Tanh"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/split:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1"
  op: "Mul"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/Sigmoid_1"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/Tanh"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1"
  op: "Add"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/Mul"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/Tanh_1"
  op: "Tanh"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/split:3"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2"
  op: "Mul"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/Tanh_1"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/Sigmoid_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\004\000\000\000\010\000\000"
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.04419417306780815
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.04419417306780815
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/kernel"
  op: "VariableV2"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/kernel/Assign"
  op: "Assign"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/kernel"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/kernel/Initializer/random_uniform"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/kernel/read"
  op: "Identity"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/kernel"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/bias/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2048
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/bias/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/bias/Initializer/zeros"
  op: "Fill"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/bias/Initializer/zeros/shape_as_tensor"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/bias/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/bias"
  op: "VariableV2"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2048
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/bias/Assign"
  op: "Assign"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/bias"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/bias/Initializer/zeros"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/bias/read"
  op: "Identity"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/bias"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/Const"
  op: "Const"
  input: "^v/tower_0/decoder/decoder/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/concat/axis"
  op: "Const"
  input: "^v/tower_0/decoder/decoder/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/concat"
  op: "ConcatV2"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2"
  input: "v/tower_0/decoder/decoder/while/Identity_10"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/concat/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/MatMul"
  op: "MatMul"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/concat"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/MatMul/Enter"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/kernel/read"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/decoder/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/MatMul"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/BiasAdd/Enter"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/bias/read"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/decoder/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/Const_1"
  op: "Const"
  input: "^v/tower_0/decoder/decoder/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/split"
  op: "Split"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/Const"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/BiasAdd"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/Const_2"
  op: "Const"
  input: "^v/tower_0/decoder/decoder/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.800000011920929
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/Add"
  op: "Add"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/split:2"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/Const_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/Add"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/Mul"
  op: "Mul"
  input: "v/tower_0/decoder/decoder/while/Identity_9"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/Sigmoid"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/split"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/Tanh"
  op: "Tanh"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/split:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/Mul_1"
  op: "Mul"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/Sigmoid_1"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/Tanh"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/Add_1"
  op: "Add"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/Mul"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/Mul_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/Tanh_1"
  op: "Tanh"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/Add_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/split:3"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/Mul_2"
  op: "Mul"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/Tanh_1"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/Sigmoid_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/assert_equal/x"
  op: "Const"
  input: "^v/tower_0/decoder/decoder/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/assert_equal/Equal"
  op: "Equal"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/assert_equal/x"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/assert_equal/Equal/Enter"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/assert_equal/Equal/Enter"
  op: "Enter"
  input: "v/tower_0/decoder/BahdanauAttention/strided_slice_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/decoder/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/assert_equal/Const"
  op: "Const"
  input: "^v/tower_0/decoder/decoder/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/assert_equal/All"
  op: "All"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/assert_equal/Equal"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/assert_equal/Const"
  device: "/gpu:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/assert_equal/Assert/Const"
  op: "Const"
  input: "^v/tower_0/decoder/decoder/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "When applying AttentionWrapper Attention_Wrapper: Non-matching batch sizes between the memory (encoder output) and the query (decoder output).  Are you using the BeamSearchDecoder?  You may need to tile your memory input via the tf.contrib.seq2seq.tile_batch function with argument multiple=beam_width."
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/assert_equal/Assert/Const_1"
  op: "Const"
  input: "^v/tower_0/decoder/decoder/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x == y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/assert_equal/Assert/Const_2"
  op: "Const"
  input: "^v/tower_0/decoder/decoder/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/assert_equal/x:0) = "
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/assert_equal/Assert/Const_3"
  op: "Const"
  input: "^v/tower_0/decoder/decoder/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (v/tower_0/decoder/BahdanauAttention/strided_slice_1:0) = "
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/assert_equal/Assert/Assert/data_0"
  op: "Const"
  input: "^v/tower_0/decoder/decoder/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "When applying AttentionWrapper Attention_Wrapper: Non-matching batch sizes between the memory (encoder output) and the query (decoder output).  Are you using the BeamSearchDecoder?  You may need to tile your memory input via the tf.contrib.seq2seq.tile_batch function with argument multiple=beam_width."
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/assert_equal/Assert/Assert/data_1"
  op: "Const"
  input: "^v/tower_0/decoder/decoder/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x == y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/assert_equal/Assert/Assert/data_2"
  op: "Const"
  input: "^v/tower_0/decoder/decoder/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/assert_equal/x:0) = "
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/assert_equal/Assert/Assert/data_4"
  op: "Const"
  input: "^v/tower_0/decoder/decoder/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (v/tower_0/decoder/BahdanauAttention/strided_slice_1:0) = "
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/assert_equal/Assert/Assert"
  op: "Assert"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/assert_equal/All"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/assert_equal/Assert/Assert/data_0"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/assert_equal/Assert/Assert/data_1"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/assert_equal/Assert/Assert/data_2"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/assert_equal/x"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/assert_equal/Assert/Assert/data_4"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/assert_equal/Equal/Enter"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/checked_cell_output"
  op: "Identity"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/Mul_2"
  input: "^v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/assert_equal/Assert/Assert"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/bahdanau_attention/query_layer/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/bahdanau_attention/query_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/bahdanau_attention/query_layer/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/bahdanau_attention/query_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0765465572476387
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/bahdanau_attention/query_layer/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/bahdanau_attention/query_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0765465572476387
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/bahdanau_attention/query_layer/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "v/decoder/Attention_Wrapper/bahdanau_attention/query_layer/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/bahdanau_attention/query_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/bahdanau_attention/query_layer/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "v/decoder/Attention_Wrapper/bahdanau_attention/query_layer/kernel/Initializer/random_uniform/max"
  input: "v/decoder/Attention_Wrapper/bahdanau_attention/query_layer/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/bahdanau_attention/query_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/bahdanau_attention/query_layer/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "v/decoder/Attention_Wrapper/bahdanau_attention/query_layer/kernel/Initializer/random_uniform/RandomUniform"
  input: "v/decoder/Attention_Wrapper/bahdanau_attention/query_layer/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/bahdanau_attention/query_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/bahdanau_attention/query_layer/kernel/Initializer/random_uniform"
  op: "Add"
  input: "v/decoder/Attention_Wrapper/bahdanau_attention/query_layer/kernel/Initializer/random_uniform/mul"
  input: "v/decoder/Attention_Wrapper/bahdanau_attention/query_layer/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/bahdanau_attention/query_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/bahdanau_attention/query_layer/kernel"
  op: "VariableV2"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/bahdanau_attention/query_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/bahdanau_attention/query_layer/kernel/Assign"
  op: "Assign"
  input: "v/decoder/Attention_Wrapper/bahdanau_attention/query_layer/kernel"
  input: "v/decoder/Attention_Wrapper/bahdanau_attention/query_layer/kernel/Initializer/random_uniform"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/bahdanau_attention/query_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/bahdanau_attention/query_layer/kernel/read"
  op: "Identity"
  input: "v/decoder/Attention_Wrapper/bahdanau_attention/query_layer/kernel"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/bahdanau_attention/query_layer/MatMul"
  op: "MatMul"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/checked_cell_output"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/bahdanau_attention/query_layer/MatMul/Enter"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/bahdanau_attention/query_layer/MatMul/Enter"
  op: "Enter"
  input: "v/decoder/Attention_Wrapper/bahdanau_attention/query_layer/kernel/read"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/decoder/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/bahdanau_attention/ExpandDims/dim"
  op: "Const"
  input: "^v/tower_0/decoder/decoder/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/bahdanau_attention/ExpandDims"
  op: "ExpandDims"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/bahdanau_attention/query_layer/MatMul"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/bahdanau_attention/ExpandDims/dim"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/bahdanau_attention/attention_v/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/bahdanau_attention/attention_v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/bahdanau_attention/attention_v/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/bahdanau_attention/attention_v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0765465572476387
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/bahdanau_attention/attention_v/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/bahdanau_attention/attention_v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0765465572476387
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/bahdanau_attention/attention_v/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "v/decoder/Attention_Wrapper/bahdanau_attention/attention_v/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/bahdanau_attention/attention_v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/bahdanau_attention/attention_v/Initializer/random_uniform/sub"
  op: "Sub"
  input: "v/decoder/Attention_Wrapper/bahdanau_attention/attention_v/Initializer/random_uniform/max"
  input: "v/decoder/Attention_Wrapper/bahdanau_attention/attention_v/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/bahdanau_attention/attention_v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/bahdanau_attention/attention_v/Initializer/random_uniform/mul"
  op: "Mul"
  input: "v/decoder/Attention_Wrapper/bahdanau_attention/attention_v/Initializer/random_uniform/RandomUniform"
  input: "v/decoder/Attention_Wrapper/bahdanau_attention/attention_v/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/bahdanau_attention/attention_v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/bahdanau_attention/attention_v/Initializer/random_uniform"
  op: "Add"
  input: "v/decoder/Attention_Wrapper/bahdanau_attention/attention_v/Initializer/random_uniform/mul"
  input: "v/decoder/Attention_Wrapper/bahdanau_attention/attention_v/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/bahdanau_attention/attention_v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/bahdanau_attention/attention_v"
  op: "VariableV2"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/bahdanau_attention/attention_v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/bahdanau_attention/attention_v/Assign"
  op: "Assign"
  input: "v/decoder/Attention_Wrapper/bahdanau_attention/attention_v"
  input: "v/decoder/Attention_Wrapper/bahdanau_attention/attention_v/Initializer/random_uniform"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/bahdanau_attention/attention_v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/bahdanau_attention/attention_v/read"
  op: "Identity"
  input: "v/decoder/Attention_Wrapper/bahdanau_attention/attention_v"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/bahdanau_attention/add"
  op: "Add"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/bahdanau_attention/add/Enter"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/bahdanau_attention/ExpandDims"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/bahdanau_attention/add/Enter"
  op: "Enter"
  input: "v/tower_0/decoder/BahdanauAttention/memory_layer/Tensordot"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/decoder/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/bahdanau_attention/Tanh"
  op: "Tanh"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/bahdanau_attention/add"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/bahdanau_attention/mul"
  op: "Mul"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/bahdanau_attention/mul/Enter"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/bahdanau_attention/Tanh"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/bahdanau_attention/mul/Enter"
  op: "Enter"
  input: "v/decoder/Attention_Wrapper/bahdanau_attention/attention_v/read"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/decoder/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/bahdanau_attention/Sum/reduction_indices"
  op: "Const"
  input: "^v/tower_0/decoder/decoder/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/bahdanau_attention/Sum"
  op: "Sum"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/bahdanau_attention/mul"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/bahdanau_attention/Sum/reduction_indices"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Softmax"
  op: "Softmax"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/bahdanau_attention/Sum"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/ExpandDims/dim"
  op: "Const"
  input: "^v/tower_0/decoder/decoder/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/ExpandDims"
  op: "ExpandDims"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Softmax"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/ExpandDims/dim"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/MatMul"
  op: "BatchMatMul"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/ExpandDims"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/MatMul/Enter"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/MatMul/Enter"
  op: "Enter"
  input: "v/tower_0/encoder/concat"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/decoder/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Squeeze"
  op: "Squeeze"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/MatMul"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/concat_1/axis"
  op: "Const"
  input: "^v/tower_0/decoder/decoder/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/concat_1"
  op: "ConcatV2"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/checked_cell_output"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Squeeze"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/concat_1/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 1536
          }
        }
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/attention_layer/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\006\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/attention_layer/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.05412658676505089
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/attention_layer/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05412658676505089
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/attention_layer/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "v/decoder/Attention_Wrapper/attention_layer/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1536
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/attention_layer/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "v/decoder/Attention_Wrapper/attention_layer/kernel/Initializer/random_uniform/max"
  input: "v/decoder/Attention_Wrapper/attention_layer/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/attention_layer/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "v/decoder/Attention_Wrapper/attention_layer/kernel/Initializer/random_uniform/RandomUniform"
  input: "v/decoder/Attention_Wrapper/attention_layer/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1536
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/attention_layer/kernel/Initializer/random_uniform"
  op: "Add"
  input: "v/decoder/Attention_Wrapper/attention_layer/kernel/Initializer/random_uniform/mul"
  input: "v/decoder/Attention_Wrapper/attention_layer/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1536
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/attention_layer/kernel"
  op: "VariableV2"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1536
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1536
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/attention_layer/kernel/Assign"
  op: "Assign"
  input: "v/decoder/Attention_Wrapper/attention_layer/kernel"
  input: "v/decoder/Attention_Wrapper/attention_layer/kernel/Initializer/random_uniform"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1536
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "v/decoder/Attention_Wrapper/attention_layer/kernel/read"
  op: "Identity"
  input: "v/decoder/Attention_Wrapper/attention_layer/kernel"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1536
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/attention_layer/MatMul"
  op: "MatMul"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/concat_1"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/attention_layer/MatMul/Enter"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/attention_layer/MatMul/Enter"
  op: "Enter"
  input: "v/decoder/Attention_Wrapper/attention_layer/kernel/read"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1536
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/decoder/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/concat_2/concat_dim"
  op: "Const"
  input: "^v/tower_0/decoder/decoder/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/concat_2"
  op: "Identity"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/attention_layer/MatMul"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/add/y"
  op: "Const"
  input: "^v/tower_0/decoder/decoder/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/add"
  op: "Add"
  input: "v/tower_0/decoder/decoder/while/Identity_12"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/add/y"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperSample/ArgMax/dimension"
  op: "Const"
  input: "^v/tower_0/decoder/decoder/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperSample/ArgMax"
  op: "ArgMax"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/concat_2"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperSample/ArgMax/dimension"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperSample/Cast"
  op: "Cast"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperSample/ArgMax"
  device: "/gpu:0"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/add/y"
  op: "Const"
  input: "^v/tower_0/decoder/decoder/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/add"
  op: "Add"
  input: "v/tower_0/decoder/decoder/while/Identity"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/add/y"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/GreaterEqual"
  op: "GreaterEqual"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/add"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/GreaterEqual/Enter"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/GreaterEqual/Enter"
  op: "Enter"
  input: "IteratorGetNext:4"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/decoder/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/Const"
  op: "Const"
  input: "^v/tower_0/decoder/decoder/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/All"
  op: "All"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/GreaterEqual"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/Const"
  device: "/gpu:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Switch"
  op: "Switch"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/All"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/All"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/switch_t"
  op: "Identity"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Switch:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/switch_f"
  op: "Identity"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Switch"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/pred_id"
  op: "Identity"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/All"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter"
  op: "Enter"
  input: "v/tower_0/decoder/TrainingHelper/zeros_like"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/decoder/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Switch_1"
  op: "Switch"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/pred_id"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch_1"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch_2"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "v/tower_0/decoder/TrainingHelper/TensorArray"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/decoder/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch"
  op: "Switch"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/pred_id"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch_1"
  op: "Switch"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/add"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/pred_id"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/add"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "v/tower_0/decoder/TrainingHelper/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/decoder/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Switch_2"
  op: "Switch"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/pred_id"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge"
  op: "Merge"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/TensorArrayReadV3"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Switch_1:1"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/LogicalOr"
  op: "LogicalOr"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/GreaterEqual"
  input: "v/tower_0/decoder/decoder/while/Identity_16"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/LogicalNot_1"
  op: "LogicalNot"
  input: "v/tower_0/decoder/decoder/while/Identity_16"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/LogicalAnd"
  op: "LogicalAnd"
  input: "v/tower_0/decoder/decoder/while/LogicalNot_1"
  input: "v/tower_0/decoder/decoder/while/LogicalOr"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Shape"
  op: "Shape"
  input: "v/tower_0/decoder/decoder/while/Identity_17"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/add/y"
  op: "Const"
  input: "^v/tower_0/decoder/decoder/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/add"
  op: "Add"
  input: "v/tower_0/decoder/decoder/while/Identity"
  input: "v/tower_0/decoder/decoder/while/add/y"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Fill"
  op: "Fill"
  input: "v/tower_0/decoder/decoder/while/Shape"
  input: "v/tower_0/decoder/decoder/while/add"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Select"
  op: "Select"
  input: "v/tower_0/decoder/decoder/while/LogicalAnd"
  input: "v/tower_0/decoder/decoder/while/Fill"
  input: "v/tower_0/decoder/decoder/while/Identity_17"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "v/tower_0/decoder/decoder/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "v/tower_0/decoder/decoder/while/Identity"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/concat_2"
  input: "v/tower_0/decoder/decoder/while/Identity_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/concat_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "v/tower_0/decoder/decoder/TensorArray"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/concat_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/decoder/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "v/tower_0/decoder/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
  input: "v/tower_0/decoder/decoder/while/Identity"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperSample/Cast"
  input: "v/tower_0/decoder/decoder/while/Identity_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperSample/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "v/tower_0/decoder/decoder/TensorArray_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperSample/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "v/tower_0/decoder/decoder/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/add_1/y"
  op: "Const"
  input: "^v/tower_0/decoder/decoder/while/Identity"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/add_1"
  op: "Add"
  input: "v/tower_0/decoder/decoder/while/Identity"
  input: "v/tower_0/decoder/decoder/while/add_1/y"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/NextIteration"
  op: "NextIteration"
  input: "v/tower_0/decoder/decoder/while/add_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/NextIteration_1"
  op: "NextIteration"
  input: "v/tower_0/decoder/decoder/while/TensorArrayWrite/TensorArrayWriteV3"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/NextIteration_2"
  op: "NextIteration"
  input: "v/tower_0/decoder/decoder/while/TensorArrayWrite_1/TensorArrayWriteV3"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/NextIteration_3"
  op: "NextIteration"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/Add_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/NextIteration_4"
  op: "NextIteration"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/Mul_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/NextIteration_5"
  op: "NextIteration"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/Add_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/NextIteration_6"
  op: "NextIteration"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/Mul_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/NextIteration_7"
  op: "NextIteration"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/Add_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/NextIteration_8"
  op: "NextIteration"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/Mul_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/NextIteration_9"
  op: "NextIteration"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/Add_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/NextIteration_10"
  op: "NextIteration"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/Mul_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/NextIteration_11"
  op: "NextIteration"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/concat_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/NextIteration_12"
  op: "NextIteration"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/add"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/NextIteration_13"
  op: "NextIteration"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Softmax"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/NextIteration_14"
  op: "NextIteration"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/decoder/Attention_Wrapper/Softmax"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/NextIteration_15"
  op: "NextIteration"
  input: "v/tower_0/decoder/decoder/while/BasicDecoderStep/TrainingHelperNextInputs/cond/Merge"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/NextIteration_16"
  op: "NextIteration"
  input: "v/tower_0/decoder/decoder/while/LogicalOr"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/NextIteration_17"
  op: "NextIteration"
  input: "v/tower_0/decoder/decoder/while/Select"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Exit"
  op: "Exit"
  input: "v/tower_0/decoder/decoder/while/Switch"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Exit_1"
  op: "Exit"
  input: "v/tower_0/decoder/decoder/while/Switch_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Exit_2"
  op: "Exit"
  input: "v/tower_0/decoder/decoder/while/Switch_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Exit_3"
  op: "Exit"
  input: "v/tower_0/decoder/decoder/while/Switch_3"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Exit_4"
  op: "Exit"
  input: "v/tower_0/decoder/decoder/while/Switch_4"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Exit_5"
  op: "Exit"
  input: "v/tower_0/decoder/decoder/while/Switch_5"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Exit_6"
  op: "Exit"
  input: "v/tower_0/decoder/decoder/while/Switch_6"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Exit_7"
  op: "Exit"
  input: "v/tower_0/decoder/decoder/while/Switch_7"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Exit_8"
  op: "Exit"
  input: "v/tower_0/decoder/decoder/while/Switch_8"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Exit_9"
  op: "Exit"
  input: "v/tower_0/decoder/decoder/while/Switch_9"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Exit_10"
  op: "Exit"
  input: "v/tower_0/decoder/decoder/while/Switch_10"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Exit_11"
  op: "Exit"
  input: "v/tower_0/decoder/decoder/while/Switch_11"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Exit_12"
  op: "Exit"
  input: "v/tower_0/decoder/decoder/while/Switch_12"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Exit_13"
  op: "Exit"
  input: "v/tower_0/decoder/decoder/while/Switch_13"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Exit_14"
  op: "Exit"
  input: "v/tower_0/decoder/decoder/while/Switch_14"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Exit_15"
  op: "Exit"
  input: "v/tower_0/decoder/decoder/while/Switch_15"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Exit_16"
  op: "Exit"
  input: "v/tower_0/decoder/decoder/while/Switch_16"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/while/Exit_17"
  op: "Exit"
  input: "v/tower_0/decoder/decoder/while/Switch_17"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "v/tower_0/decoder/decoder/TensorArray"
  input: "v/tower_0/decoder/decoder/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/decoder/decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/decoder/decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/decoder/decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/TensorArrayStack/range"
  op: "Range"
  input: "v/tower_0/decoder/decoder/TensorArrayStack/range/start"
  input: "v/tower_0/decoder/decoder/TensorArrayStack/TensorArraySizeV3"
  input: "v/tower_0/decoder/decoder/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/decoder/decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "v/tower_0/decoder/decoder/TensorArray"
  input: "v/tower_0/decoder/decoder/TensorArrayStack/range"
  input: "v/tower_0/decoder/decoder/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/decoder/decoder/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 512
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/TensorArrayStack_1/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "v/tower_0/decoder/decoder/TensorArray_1"
  input: "v/tower_0/decoder/decoder/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/decoder/decoder/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/TensorArrayStack_1/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/decoder/decoder/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/TensorArrayStack_1/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/decoder/decoder/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/TensorArrayStack_1/range"
  op: "Range"
  input: "v/tower_0/decoder/decoder/TensorArrayStack_1/range/start"
  input: "v/tower_0/decoder/decoder/TensorArrayStack_1/TensorArraySizeV3"
  input: "v/tower_0/decoder/decoder/TensorArrayStack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/decoder/decoder/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/TensorArrayStack_1/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "v/tower_0/decoder/decoder/TensorArray_1"
  input: "v/tower_0/decoder/decoder/TensorArrayStack_1/range"
  input: "v/tower_0/decoder/decoder/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/tower_0/decoder/decoder/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/Rank"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/range/start"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/range/delta"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/range"
  op: "Range"
  input: "v/tower_0/decoder/decoder/range/start"
  input: "v/tower_0/decoder/decoder/Rank"
  input: "v/tower_0/decoder/decoder/range/delta"
  device: "/gpu:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/concat_2/values_0"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/concat_2/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/concat_2"
  op: "ConcatV2"
  input: "v/tower_0/decoder/decoder/concat_2/values_0"
  input: "v/tower_0/decoder/decoder/range"
  input: "v/tower_0/decoder/decoder/concat_2/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/transpose"
  op: "Transpose"
  input: "v/tower_0/decoder/decoder/TensorArrayStack/TensorArrayGatherV3"
  input: "v/tower_0/decoder/decoder/concat_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/Rank_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/range_1/start"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/range_1/delta"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/range_1"
  op: "Range"
  input: "v/tower_0/decoder/decoder/range_1/start"
  input: "v/tower_0/decoder/decoder/Rank_1"
  input: "v/tower_0/decoder/decoder/range_1/delta"
  device: "/gpu:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/concat_3/values_0"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/concat_3/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/concat_3"
  op: "ConcatV2"
  input: "v/tower_0/decoder/decoder/concat_3/values_0"
  input: "v/tower_0/decoder/decoder/range_1"
  input: "v/tower_0/decoder/decoder/concat_3/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/decoder/transpose_1"
  op: "Transpose"
  input: "v/tower_0/decoder/decoder/TensorArrayStack_1/TensorArrayGatherV3"
  input: "v/tower_0/decoder/decoder/concat_3"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/decoder/output_projection/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\002\000\000P\303\000\000"
      }
    }
  }
}
node {
  name: "v/decoder/output_projection/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.010898791253566742
      }
    }
  }
}
node {
  name: "v/decoder/output_projection/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.010898791253566742
      }
    }
  }
}
node {
  name: "v/decoder/output_projection/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "v/decoder/output_projection/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 50000
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "v/decoder/output_projection/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "v/decoder/output_projection/kernel/Initializer/random_uniform/max"
  input: "v/decoder/output_projection/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/decoder/output_projection/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "v/decoder/output_projection/kernel/Initializer/random_uniform/RandomUniform"
  input: "v/decoder/output_projection/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 50000
          }
        }
      }
    }
  }
}
node {
  name: "v/decoder/output_projection/kernel/Initializer/random_uniform"
  op: "Add"
  input: "v/decoder/output_projection/kernel/Initializer/random_uniform/mul"
  input: "v/decoder/output_projection/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 50000
          }
        }
      }
    }
  }
}
node {
  name: "v/decoder/output_projection/kernel"
  op: "VariableV2"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 50000
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
        dim {
          size: 50000
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "v/decoder/output_projection/kernel/Assign"
  op: "Assign"
  input: "v/decoder/output_projection/kernel"
  input: "v/decoder/output_projection/kernel/Initializer/random_uniform"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 50000
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "v/decoder/output_projection/kernel/read"
  op: "Identity"
  input: "v/decoder/output_projection/kernel"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 50000
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot/Shape"
  op: "Shape"
  input: "v/tower_0/decoder/decoder/transpose"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot/Rank"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot/axes"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot/GreaterEqual/y"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot/GreaterEqual"
  op: "GreaterEqual"
  input: "v/tower_0/decoder/output_projection/Tensordot/axes"
  input: "v/tower_0/decoder/output_projection/Tensordot/GreaterEqual/y"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot/Cast"
  op: "Cast"
  input: "v/tower_0/decoder/output_projection/Tensordot/GreaterEqual"
  device: "/gpu:0"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot/mul"
  op: "Mul"
  input: "v/tower_0/decoder/output_projection/Tensordot/Cast"
  input: "v/tower_0/decoder/output_projection/Tensordot/axes"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot/Less/y"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot/Less"
  op: "Less"
  input: "v/tower_0/decoder/output_projection/Tensordot/axes"
  input: "v/tower_0/decoder/output_projection/Tensordot/Less/y"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot/Cast_1"
  op: "Cast"
  input: "v/tower_0/decoder/output_projection/Tensordot/Less"
  device: "/gpu:0"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot/add"
  op: "Add"
  input: "v/tower_0/decoder/output_projection/Tensordot/axes"
  input: "v/tower_0/decoder/output_projection/Tensordot/Rank"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot/mul_1"
  op: "Mul"
  input: "v/tower_0/decoder/output_projection/Tensordot/Cast_1"
  input: "v/tower_0/decoder/output_projection/Tensordot/add"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot/add_1"
  op: "Add"
  input: "v/tower_0/decoder/output_projection/Tensordot/mul"
  input: "v/tower_0/decoder/output_projection/Tensordot/mul_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot/range/start"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot/range/delta"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot/range"
  op: "Range"
  input: "v/tower_0/decoder/output_projection/Tensordot/range/start"
  input: "v/tower_0/decoder/output_projection/Tensordot/Rank"
  input: "v/tower_0/decoder/output_projection/Tensordot/range/delta"
  device: "/gpu:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot/ListDiff"
  op: "ListDiff"
  input: "v/tower_0/decoder/output_projection/Tensordot/range"
  input: "v/tower_0/decoder/output_projection/Tensordot/add_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot/GatherV2/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot/GatherV2"
  op: "GatherV2"
  input: "v/tower_0/decoder/output_projection/Tensordot/Shape"
  input: "v/tower_0/decoder/output_projection/Tensordot/ListDiff"
  input: "v/tower_0/decoder/output_projection/Tensordot/GatherV2/axis"
  device: "/gpu:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot/GatherV2_1/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot/GatherV2_1"
  op: "GatherV2"
  input: "v/tower_0/decoder/output_projection/Tensordot/Shape"
  input: "v/tower_0/decoder/output_projection/Tensordot/add_1"
  input: "v/tower_0/decoder/output_projection/Tensordot/GatherV2_1/axis"
  device: "/gpu:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot/Prod"
  op: "Prod"
  input: "v/tower_0/decoder/output_projection/Tensordot/GatherV2"
  input: "v/tower_0/decoder/output_projection/Tensordot/Const"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot/Const_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot/Prod_1"
  op: "Prod"
  input: "v/tower_0/decoder/output_projection/Tensordot/GatherV2_1"
  input: "v/tower_0/decoder/output_projection/Tensordot/Const_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot/concat/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot/concat"
  op: "ConcatV2"
  input: "v/tower_0/decoder/output_projection/Tensordot/GatherV2_1"
  input: "v/tower_0/decoder/output_projection/Tensordot/GatherV2"
  input: "v/tower_0/decoder/output_projection/Tensordot/concat/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot/concat_1/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot/concat_1"
  op: "ConcatV2"
  input: "v/tower_0/decoder/output_projection/Tensordot/ListDiff"
  input: "v/tower_0/decoder/output_projection/Tensordot/add_1"
  input: "v/tower_0/decoder/output_projection/Tensordot/concat_1/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot/stack"
  op: "Pack"
  input: "v/tower_0/decoder/output_projection/Tensordot/Prod"
  input: "v/tower_0/decoder/output_projection/Tensordot/Prod_1"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot/transpose"
  op: "Transpose"
  input: "v/tower_0/decoder/decoder/transpose"
  input: "v/tower_0/decoder/output_projection/Tensordot/concat_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot/Reshape"
  op: "Reshape"
  input: "v/tower_0/decoder/output_projection/Tensordot/transpose"
  input: "v/tower_0/decoder/output_projection/Tensordot/stack"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot/transpose_1/perm"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot/transpose_1"
  op: "Transpose"
  input: "v/decoder/output_projection/kernel/read"
  input: "v/tower_0/decoder/output_projection/Tensordot/transpose_1/perm"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 50000
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot/Reshape_1/shape"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\002\000\000P\303\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot/Reshape_1"
  op: "Reshape"
  input: "v/tower_0/decoder/output_projection/Tensordot/transpose_1"
  input: "v/tower_0/decoder/output_projection/Tensordot/Reshape_1/shape"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 50000
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot/MatMul"
  op: "MatMul"
  input: "v/tower_0/decoder/output_projection/Tensordot/Reshape"
  input: "v/tower_0/decoder/output_projection/Tensordot/Reshape_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 50000
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot/Const_2"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 50000
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot/concat_2/axis"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot/concat_2"
  op: "ConcatV2"
  input: "v/tower_0/decoder/output_projection/Tensordot/GatherV2"
  input: "v/tower_0/decoder/output_projection/Tensordot/Const_2"
  input: "v/tower_0/decoder/output_projection/Tensordot/concat_2/axis"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/decoder/output_projection/Tensordot"
  op: "Reshape"
  input: "v/tower_0/decoder/output_projection/Tensordot/MatMul"
  input: "v/tower_0/decoder/output_projection/Tensordot/concat_2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
          dim {
            size: -1
          }
          dim {
            size: 50000
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/Shape"
  op: "Shape"
  input: "IteratorGetNext:2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/strided_slice/stack"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/strided_slice/stack_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "v/tower_0/strided_slice/stack_2"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/strided_slice"
  op: "StridedSlice"
  input: "v/tower_0/Shape"
  input: "v/tower_0/strided_slice/stack"
  input: "v/tower_0/strided_slice/stack_1"
  input: "v/tower_0/strided_slice/stack_2"
  device: "/gpu:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/Shape"
  op: "Shape"
  input: "IteratorGetNext:2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/Shape_1"
  op: "Shape"
  input: "IteratorGetNext:2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/Shape_2"
  op: "Shape"
  input: "v/tower_0/decoder/output_projection/Tensordot"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/strided_slice/stack"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/strided_slice/stack_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/strided_slice/stack_2"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/strided_slice"
  op: "StridedSlice"
  input: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/Shape_2"
  input: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/strided_slice/stack"
  input: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/strided_slice/stack_1"
  input: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/strided_slice/stack_2"
  device: "/gpu:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/assert_equal/Equal"
  op: "Equal"
  input: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/Shape_1"
  input: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/strided_slice"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/assert_equal/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/assert_equal/All"
  op: "All"
  input: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/assert_equal/Equal"
  input: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/assert_equal/Const"
  device: "/gpu:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/assert_equal/Assert/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/assert_equal/Assert/Const_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x == y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/assert_equal/Assert/Const_2"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (v/tower_0/SparseSoftmaxCrossEntropyWithLogits/Shape_1:0) = "
      }
    }
  }
}
node {
  name: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/assert_equal/Assert/Const_3"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (v/tower_0/SparseSoftmaxCrossEntropyWithLogits/strided_slice:0) = "
      }
    }
  }
}
node {
  name: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/assert_equal/Assert/Assert/data_0"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/assert_equal/Assert/Assert/data_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x == y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/assert_equal/Assert/Assert/data_2"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (v/tower_0/SparseSoftmaxCrossEntropyWithLogits/Shape_1:0) = "
      }
    }
  }
}
node {
  name: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/assert_equal/Assert/Assert/data_4"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (v/tower_0/SparseSoftmaxCrossEntropyWithLogits/strided_slice:0) = "
      }
    }
  }
}
node {
  name: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/assert_equal/Assert/Assert"
  op: "Assert"
  input: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/assert_equal/All"
  input: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/assert_equal/Assert/Assert/data_0"
  input: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/assert_equal/Assert/Assert/data_1"
  input: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/assert_equal/Assert/Assert/data_2"
  input: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/Shape_1"
  input: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/assert_equal/Assert/Assert/data_4"
  input: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/strided_slice"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/Shape_3"
  op: "Shape"
  input: "v/tower_0/decoder/output_projection/Tensordot"
  input: "^v/tower_0/SparseSoftmaxCrossEntropyWithLogits/assert_equal/Assert/Assert"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/Rank"
  op: "Const"
  input: "^v/tower_0/SparseSoftmaxCrossEntropyWithLogits/assert_equal/Assert/Assert"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/sub/y"
  op: "Const"
  input: "^v/tower_0/SparseSoftmaxCrossEntropyWithLogits/assert_equal/Assert/Assert"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/sub"
  op: "Sub"
  input: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/Rank"
  input: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/sub/y"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/add/y"
  op: "Const"
  input: "^v/tower_0/SparseSoftmaxCrossEntropyWithLogits/assert_equal/Assert/Assert"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/add"
  op: "Add"
  input: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/sub"
  input: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/add/y"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/strided_slice_1/stack"
  op: "Pack"
  input: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/sub"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/strided_slice_1/stack_1"
  op: "Pack"
  input: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/add"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/strided_slice_1/stack_2"
  op: "Const"
  input: "^v/tower_0/SparseSoftmaxCrossEntropyWithLogits/assert_equal/Assert/Assert"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/strided_slice_1"
  op: "StridedSlice"
  input: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/Shape_3"
  input: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/strided_slice_1/stack"
  input: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/strided_slice_1/stack_1"
  input: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/strided_slice_1/stack_2"
  device: "/gpu:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/Reshape/shape/0"
  op: "Const"
  input: "^v/tower_0/SparseSoftmaxCrossEntropyWithLogits/assert_equal/Assert/Assert"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/Reshape/shape"
  op: "Pack"
  input: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/Reshape/shape/0"
  input: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/strided_slice_1"
  device: "/gpu:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/Reshape"
  op: "Reshape"
  input: "v/tower_0/decoder/output_projection/Tensordot"
  input: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/Reshape/shape"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/Reshape_1/shape"
  op: "Const"
  input: "^v/tower_0/SparseSoftmaxCrossEntropyWithLogits/assert_equal/Assert/Assert"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/Reshape_1"
  op: "Reshape"
  input: "IteratorGetNext:2"
  input: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/Reshape_1/shape"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  op: "SparseSoftmaxCrossEntropyWithLogits"
  input: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/Reshape"
  input: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/Reshape_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlabels"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/Reshape_2"
  op: "Reshape"
  input: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  input: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/Shape"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/SequenceMask/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "v/tower_0/SequenceMask/Const_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "v/tower_0/SequenceMask/Range"
  op: "Range"
  input: "v/tower_0/SequenceMask/Const"
  input: "v/tower_0/strided_slice"
  input: "v/tower_0/SequenceMask/Const_1"
  device: "/gpu:0"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/SequenceMask/ExpandDims/dim"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "v/tower_0/SequenceMask/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:4"
  input: "v/tower_0/SequenceMask/ExpandDims/dim"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/SequenceMask/Cast"
  op: "Cast"
  input: "v/tower_0/SequenceMask/ExpandDims"
  device: "/gpu:0"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/SequenceMask/Less"
  op: "Less"
  input: "v/tower_0/SequenceMask/Range"
  input: "v/tower_0/SequenceMask/Cast"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/SequenceMask/Cast_1"
  op: "Cast"
  input: "v/tower_0/SequenceMask/Less"
  device: "/gpu:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/mul"
  op: "Mul"
  input: "v/tower_0/SparseSoftmaxCrossEntropyWithLogits/Reshape_2"
  input: "v/tower_0/SequenceMask/Cast_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "v/tower_0/Const"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/Sum"
  op: "Sum"
  input: "v/tower_0/mul"
  input: "v/tower_0/Const"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/Const_1"
  op: "Const"
  device: "/gpu:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "v/tower_0/Sum_1"
  op: "Sum"
  input: "v/tower_0/SequenceMask/Cast_1"
  input: "v/tower_0/Const_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "v/tower_0/truediv"
  op: "RealDiv"
  input: "v/tower_0/Sum"
  input: "v/tower_0/Sum_1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
  input: "^string_to_index/hash_table/table_init"
  input: "^string_to_index_1/hash_table/table_init"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_all_tables"
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 24
          }
        }
        string_val: "global_step"
        string_val: "v/decoder/Attention_Wrapper/attention_layer/kernel"
        string_val: "v/decoder/Attention_Wrapper/bahdanau_attention/attention_v"
        string_val: "v/decoder/Attention_Wrapper/bahdanau_attention/query_layer/kernel"
        string_val: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
        string_val: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
        string_val: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
        string_val: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
        string_val: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
        string_val: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
        string_val: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/bias"
        string_val: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/kernel"
        string_val: "v/decoder/memory_layer/kernel"
        string_val: "v/decoder/output_projection/kernel"
        string_val: "v/decoder/tgt_embedding"
        string_val: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
        string_val: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
        string_val: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
        string_val: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
        string_val: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
        string_val: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
        string_val: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
        string_val: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
        string_val: "v/encoder/src_embedding"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 24
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/Const"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "global_step"
  input: "v/decoder/Attention_Wrapper/attention_layer/kernel"
  input: "v/decoder/Attention_Wrapper/bahdanau_attention/attention_v"
  input: "v/decoder/Attention_Wrapper/bahdanau_attention/query_layer/kernel"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/bias"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/kernel"
  input: "v/decoder/memory_layer/kernel"
  input: "v/decoder/output_projection/kernel"
  input: "v/decoder/tgt_embedding"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
  input: "v/encoder/src_embedding"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 24
          }
        }
        string_val: "global_step"
        string_val: "v/decoder/Attention_Wrapper/attention_layer/kernel"
        string_val: "v/decoder/Attention_Wrapper/bahdanau_attention/attention_v"
        string_val: "v/decoder/Attention_Wrapper/bahdanau_attention/query_layer/kernel"
        string_val: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
        string_val: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
        string_val: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
        string_val: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
        string_val: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
        string_val: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
        string_val: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/bias"
        string_val: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/kernel"
        string_val: "v/decoder/memory_layer/kernel"
        string_val: "v/decoder/output_projection/kernel"
        string_val: "v/decoder/tgt_embedding"
        string_val: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
        string_val: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
        string_val: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
        string_val: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
        string_val: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
        string_val: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
        string_val: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
        string_val: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
        string_val: "v/encoder/src_embedding"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 24
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "v/decoder/Attention_Wrapper/attention_layer/kernel"
  input: "save/RestoreV2:1"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1536
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "v/decoder/Attention_Wrapper/bahdanau_attention/attention_v"
  input: "save/RestoreV2:2"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/bahdanau_attention/attention_v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "v/decoder/Attention_Wrapper/bahdanau_attention/query_layer/kernel"
  input: "save/RestoreV2:3"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/bahdanau_attention/query_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  input: "save/RestoreV2:4"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  input: "save/RestoreV2:5"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1536
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
  input: "save/RestoreV2:6"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
  input: "save/RestoreV2:7"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
  input: "save/RestoreV2:8"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
  input: "save/RestoreV2:9"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/bias"
  input: "save/RestoreV2:10"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/kernel"
  input: "save/RestoreV2:11"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "v/decoder/memory_layer/kernel"
  input: "save/RestoreV2:12"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "v/decoder/output_projection/kernel"
  input: "save/RestoreV2:13"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
          dim {
            size: 50000
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "v/decoder/tgt_embedding"
  input: "save/RestoreV2:14"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/tgt_embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50000
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  input: "save/RestoreV2:15"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  input: "save/RestoreV2:16"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
  input: "save/RestoreV2:17"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
  input: "save/RestoreV2:18"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  input: "save/RestoreV2:19"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  input: "save/RestoreV2:20"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
  input: "save/RestoreV2:21"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
  input: "save/RestoreV2:22"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1024
          }
          dim {
            size: 2048
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_23"
  op: "Assign"
  input: "v/encoder/src_embedding"
  input: "save/RestoreV2:23"
  device: "/gpu:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/src_embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50000
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all/NoOp"
  op: "NoOp"
  input: "^save/Assign"
  device: "/device:CPU:0"
}
node {
  name: "save/restore_all/NoOp_1"
  op: "NoOp"
  input: "^save/Assign_1"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_2"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
  input: "^save/Assign_23"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
  device: "/device:GPU:0"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_all/NoOp"
  input: "^save/restore_all/NoOp_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "v/encoder/src_embedding"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/src_embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "v/decoder/memory_layer/kernel"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/memory_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "v/decoder/tgt_embedding"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/tgt_embedding"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/kernel"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/bias"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "v/decoder/Attention_Wrapper/bahdanau_attention/query_layer/kernel"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/bahdanau_attention/query_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "v/decoder/Attention_Wrapper/bahdanau_attention/attention_v"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/bahdanau_attention/attention_v"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "v/decoder/Attention_Wrapper/attention_layer/kernel"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/Attention_Wrapper/attention_layer/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "v/decoder/output_projection/kernel"
  device: "/gpu:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@v/decoder/output_projection/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "global_step"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  input: "report_uninitialized_variables/IsVariableInitialized_9"
  input: "report_uninitialized_variables/IsVariableInitialized_10"
  input: "report_uninitialized_variables/IsVariableInitialized_11"
  input: "report_uninitialized_variables/IsVariableInitialized_12"
  input: "report_uninitialized_variables/IsVariableInitialized_13"
  input: "report_uninitialized_variables/IsVariableInitialized_14"
  input: "report_uninitialized_variables/IsVariableInitialized_15"
  input: "report_uninitialized_variables/IsVariableInitialized_16"
  input: "report_uninitialized_variables/IsVariableInitialized_17"
  input: "report_uninitialized_variables/IsVariableInitialized_18"
  input: "report_uninitialized_variables/IsVariableInitialized_19"
  input: "report_uninitialized_variables/IsVariableInitialized_20"
  input: "report_uninitialized_variables/IsVariableInitialized_21"
  input: "report_uninitialized_variables/IsVariableInitialized_22"
  input: "report_uninitialized_variables/IsVariableInitialized_23"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 24
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 24
          }
        }
        string_val: "v/encoder/src_embedding"
        string_val: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
        string_val: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
        string_val: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
        string_val: "v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
        string_val: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
        string_val: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
        string_val: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
        string_val: "v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
        string_val: "v/decoder/memory_layer/kernel"
        string_val: "v/decoder/tgt_embedding"
        string_val: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/kernel"
        string_val: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/bias"
        string_val: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/kernel"
        string_val: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/bias"
        string_val: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/kernel"
        string_val: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/bias"
        string_val: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/kernel"
        string_val: "v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/bias"
        string_val: "v/decoder/Attention_Wrapper/bahdanau_attention/query_layer/kernel"
        string_val: "v/decoder/Attention_Wrapper/bahdanau_attention/attention_v"
        string_val: "v/decoder/Attention_Wrapper/attention_layer/kernel"
        string_val: "v/decoder/output_projection/kernel"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 24
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 24
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 24
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 24
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_1/NoOp"
  op: "NoOp"
  input: "^global_step/Assign"
  device: "/device:CPU:0"
}
node {
  name: "init_1/NoOp_1"
  op: "NoOp"
  input: "^v/decoder/Attention_Wrapper/attention_layer/kernel/Assign"
  input: "^v/decoder/Attention_Wrapper/bahdanau_attention/attention_v/Assign"
  input: "^v/decoder/Attention_Wrapper/bahdanau_attention/query_layer/kernel/Assign"
  input: "^v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Assign"
  input: "^v/decoder/Attention_Wrapper/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Assign"
  input: "^v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Assign"
  input: "^v/decoder/Attention_Wrapper/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Assign"
  input: "^v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/bias/Assign"
  input: "^v/decoder/Attention_Wrapper/multi_rnn_cell/cell_2/basic_lstm_cell/kernel/Assign"
  input: "^v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/bias/Assign"
  input: "^v/decoder/Attention_Wrapper/multi_rnn_cell/cell_3/basic_lstm_cell/kernel/Assign"
  input: "^v/decoder/memory_layer/kernel/Assign"
  input: "^v/decoder/output_projection/kernel/Assign"
  input: "^v/decoder/tgt_embedding/Assign"
  input: "^v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Assign"
  input: "^v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Assign"
  input: "^v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Assign"
  input: "^v/encoder/bidirectional_rnn/bw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Assign"
  input: "^v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/bias/Assign"
  input: "^v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_0/basic_lstm_cell/kernel/Assign"
  input: "^v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/bias/Assign"
  input: "^v/encoder/bidirectional_rnn/fw/multi_rnn_cell/cell_1/basic_lstm_cell/kernel/Assign"
  input: "^v/encoder/src_embedding/Assign"
  device: "/device:GPU:0"
}
node {
  name: "init_1"
  op: "NoOp"
  input: "^init_1/NoOp"
  input: "^init_1/NoOp_1"
}
library {
  function {
    signature {
      name: "tf_key_func_gvSjQCbpW4c"
      input_arg {
        name: "arg0"
        type: DT_INT32
      }
      input_arg {
        name: "arg1"
        type: DT_INT32
      }
      input_arg {
        name: "arg2"
        type: DT_INT32
      }
      input_arg {
        name: "arg3"
        type: DT_INT32
      }
      input_arg {
        name: "arg4"
        type: DT_INT32
      }
      output_arg {
        name: "toint64"
        type: DT_INT64
      }
      description: "A wrapper for Defun that facilitates shape inference."
    }
    node_def {
      name: "floordiv/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 10
          }
        }
      }
    }
    node_def {
      name: "floordiv"
      op: "FloorDiv"
      input: "arg4"
      input: "floordiv/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "Minimum/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 5
          }
        }
      }
    }
    node_def {
      name: "Minimum"
      op: "Minimum"
      input: "Minimum/x:output:0"
      input: "floordiv:z:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "ToInt64"
      op: "Cast"
      input: "Minimum:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
    }
    ret {
      key: "toint64"
      value: "ToInt64:y:0"
    }
  }
  function {
    signature {
      name: "tf_reduce_func_IUmMLHKVRFo"
      input_arg {
        name: "key"
        type: DT_INT64
      }
      input_arg {
        name: "window_dataset_variant"
        type: DT_VARIANT
      }
      input_arg {
        name: "paddedbatchdataset_placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "paddedbatchdataset_placeholder_1"
        type: DT_INT32
      }
      output_arg {
        name: "paddedbatchdataset"
        type: DT_VARIANT
      }
      description: "A wrapper for Defun that facilitates shape inference."
    }
    node_def {
      name: "batch_size"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 32
          }
        }
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 1
              }
            }
            int64_val: -1
          }
        }
      }
    }
    node_def {
      name: "Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 1
              }
            }
            int64_val: -1
          }
        }
      }
    }
    node_def {
      name: "Const_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 1
              }
            }
            int64_val: -1
          }
        }
      }
    }
    node_def {
      name: "Const_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node_def {
      name: "Const_4"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node_def {
      name: "padding_value"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "padding_value_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "PaddedBatchDataset"
      op: "PaddedBatchDataset"
      input: "window_dataset_variant"
      input: "batch_size:output:0"
      input: "Const:output:0"
      input: "Const_1:output:0"
      input: "Const_2:output:0"
      input: "Const_3:output:0"
      input: "Const_4:output:0"
      input: "paddedbatchdataset_placeholder"
      input: "paddedbatchdataset_placeholder_1"
      input: "paddedbatchdataset_placeholder_1"
      input: "padding_value:output:0"
      input: "padding_value_1:output:0"
      attr {
        key: "N"
        value {
          i: 5
        }
      }
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_INT32
            type: DT_INT32
            type: DT_INT32
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    ret {
      key: "paddedbatchdataset"
      value: "PaddedBatchDataset:handle:0"
    }
  }
  function {
    signature {
      name: "tf_map_func_WXlNxGxgl7E"
      input_arg {
        name: "arg0"
        type: DT_STRING
      }
      input_arg {
        name: "arg1"
        type: DT_STRING
      }
      input_arg {
        name: "hash_table_lookup_placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "hash_table_lookup_placeholder_1"
        type: DT_INT64
      }
      input_arg {
        name: "hash_table_lookup_1_placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "hash_table_lookup_1_placeholder_1"
        type: DT_INT64
      }
      output_arg {
        name: "cast"
        type: DT_INT32
      }
      output_arg {
        name: "cast_1"
        type: DT_INT32
      }
      description: "A wrapper for Defun that facilitates shape inference."
      is_stateful: true
    }
    node_def {
      name: "hash_table_Lookup"
      op: "LookupTableFindV2"
      input: "hash_table_lookup_placeholder"
      input: "arg0"
      input: "hash_table_lookup_placeholder_1"
      attr {
        key: "Tin"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "Tout"
        value {
          type: DT_INT64
        }
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "hash_table_Lookup:values:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
    }
    node_def {
      name: "hash_table_Lookup_1"
      op: "LookupTableFindV2"
      input: "hash_table_lookup_1_placeholder"
      input: "arg1"
      input: "hash_table_lookup_1_placeholder_1"
      attr {
        key: "Tin"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "Tout"
        value {
          type: DT_INT64
        }
      }
    }
    node_def {
      name: "Cast_1"
      op: "Cast"
      input: "hash_table_Lookup_1:values:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    ret {
      key: "cast_1"
      value: "Cast_1:y:0"
    }
  }
  function {
    signature {
      name: "tf_map_func_5XlhRxW9ohU"
      input_arg {
        name: "arg0_0"
        type: DT_INT32
      }
      input_arg {
        name: "arg1_0"
        type: DT_INT32
      }
      input_arg {
        name: "arg2_0"
        type: DT_INT32
      }
      output_arg {
        name: "arg0"
        type: DT_INT32
      }
      output_arg {
        name: "arg1"
        type: DT_INT32
      }
      output_arg {
        name: "arg2"
        type: DT_INT32
      }
      output_arg {
        name: "size"
        type: DT_INT32
      }
      output_arg {
        name: "size_1"
        type: DT_INT32
      }
      description: "A wrapper for Defun that facilitates shape inference."
    }
    node_def {
      name: "Size"
      op: "Size"
      input: "arg0_0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "Size_1"
      op: "Size"
      input: "arg1_0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    ret {
      key: "arg0"
      value: "arg0_0"
    }
    ret {
      key: "arg1"
      value: "arg1_0"
    }
    ret {
      key: "arg2"
      value: "arg2_0"
    }
    ret {
      key: "size"
      value: "Size:output:0"
    }
    ret {
      key: "size_1"
      value: "Size_1:output:0"
    }
  }
  function {
    signature {
      name: "tf_map_func_ZG7oQjthlu0"
      input_arg {
        name: "arg0"
        type: DT_STRING
      }
      input_arg {
        name: "arg1"
        type: DT_STRING
      }
      output_arg {
        name: "stringsplit"
        type: DT_STRING
      }
      output_arg {
        name: "stringsplit_1"
        type: DT_STRING
      }
      description: "A wrapper for Defun that facilitates shape inference."
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: " "
          }
        }
      }
    }
    node_def {
      name: "packed"
      op: "Pack"
      input: "arg0"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "StringSplit"
      op: "StringSplit"
      input: "packed:output:0"
      input: "Const:output:0"
      attr {
        key: "skip_empty"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "Const_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: " "
          }
        }
      }
    }
    node_def {
      name: "packed_1"
      op: "Pack"
      input: "arg1"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "StringSplit_1"
      op: "StringSplit"
      input: "packed_1:output:0"
      input: "Const_1:output:0"
      attr {
        key: "skip_empty"
        value {
          b: true
        }
      }
    }
    ret {
      key: "stringsplit"
      value: "StringSplit:values:0"
    }
    ret {
      key: "stringsplit_1"
      value: "StringSplit_1:values:0"
    }
  }
  function {
    signature {
      name: "tf_predicate_qS2YGtJSHQo"
      input_arg {
        name: "arg0"
        type: DT_STRING
      }
      input_arg {
        name: "arg1"
        type: DT_STRING
      }
      output_arg {
        name: "logicaland"
        type: DT_BOOL
      }
      description: "A wrapper for Defun that facilitates shape inference."
    }
    node_def {
      name: "Size"
      op: "Size"
      input: "arg0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "Greater/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "Greater"
      op: "Greater"
      input: "Size:output:0"
      input: "Greater/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "Size_1"
      op: "Size"
      input: "arg1"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "Greater_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "Greater_1"
      op: "Greater"
      input: "Size_1:output:0"
      input: "Greater_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "LogicalAnd"
      op: "LogicalAnd"
      input: "Greater:z:0"
      input: "Greater_1:z:0"
    }
    ret {
      key: "logicaland"
      value: "LogicalAnd:z:0"
    }
  }
  function {
    signature {
      name: "tf_map_func_pVVD0U7UmUA"
      input_arg {
        name: "arg0_0"
        type: DT_INT32
      }
      input_arg {
        name: "arg1"
        type: DT_INT32
      }
      input_arg {
        name: "concat_values_0_placeholder"
        type: DT_INT32
      }
      input_arg {
        name: "concat_1_values_1_placeholder"
        type: DT_INT32
      }
      output_arg {
        name: "arg0"
        type: DT_INT32
      }
      output_arg {
        name: "concat"
        type: DT_INT32
      }
      output_arg {
        name: "concat_1"
        type: DT_INT32
      }
      description: "A wrapper for Defun that facilitates shape inference."
    }
    node_def {
      name: "concat/values_0"
      op: "Pack"
      input: "concat_values_0_placeholder"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "concat/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "concat_0"
      op: "ConcatV2"
      input: "concat/values_0:output:0"
      input: "arg1"
      input: "concat/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "concat_1/values_1"
      op: "Pack"
      input: "concat_1_values_1_placeholder"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "concat_1/axis"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "concat_1_0"
      op: "ConcatV2"
      input: "arg1"
      input: "concat_1/values_1:output:0"
      input: "concat_1/axis:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    ret {
      key: "arg0"
      value: "arg0_0"
    }
    ret {
      key: "concat"
      value: "concat_0:output:0"
    }
    ret {
      key: "concat_1"
      value: "concat_1_0:output:0"
    }
  }
  function {
    signature {
      name: "tf_window_size_func_nul81tt5qUE"
      input_arg {
        name: "key"
        type: DT_INT64
      }
      output_arg {
        name: "const"
        type: DT_INT64
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 32
          }
        }
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
  }
}
versions {
  producer: 26
  min_consumer: 12
}
